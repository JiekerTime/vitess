package split_table

import (
	"fmt"
	"testing"
)

func TestSelectRc(t *testing.T) {
	mcmp, closer := start(t)
	defer closer()
	mcmp.Exec("use user")

	for i := 1; i <= 31; i++ {
		query := fmt.Sprintf("INSERT INTO zcorder1 (order_id, customer_id, product_id, country, default_id, order_date, total_amount, quantity, unit_price, string, sequence_id) VALUES (%d, %d, %d, 'China', %d, '2023-11-11', 10.00, %d, 2.00, 'zhuchen63', %d)",
			i, i, i, i, i, i)
		mcmp.Exec(query)
	}

	for i := 33; i <= 63; i++ {
		query := fmt.Sprintf("INSERT INTO zcorder1 (order_id, customer_id, product_id, country, default_id, order_date, total_amount, quantity, unit_price, string, sequence_id) VALUES (%d, %d, %d, 'China', %d, '2023-10-11', 100.50, %d, 202.11, 'zhuchen63', %d)",
			i, i, i, i, i, i)
		mcmp.Exec(query)
	}

	mcmp.ExecAndNotEmpty("SELECT order_id, total_amount FROM zcorder1 GROUP BY product_id HAVING total_amount > 100")
	mcmp.ExecAndNotEmpty("SELECT order_id, order_date FROM zcorder1 GROUP BY product_id HAVING order_date < '2023-12-01'")
	mcmp.ExecAndNotEmpty("SELECT order_id, product_id FROM zcorder1 GROUP BY product_id HAVING product_id IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT order_id, total_amount, country FROM zcorder1 GROUP BY product_id HAVING total_amount < 1000 AND country = 'China'")
	mcmp.ExecAndNotEmpty("SELECT order_id, SUM(quantity) AS total_quantity FROM zcorder1 GROUP BY product_id HAVING total_quantity <= 5")
	mcmp.ExecAndNotEmpty("SELECT COUNT(order_id) AS order_count FROM zcorder1 GROUP BY product_id HAVING MIN(unit_price) >= 50")
	mcmp.ExecAndNotEmpty("SELECT order_id, customer_id, country FROM zcorder1 GROUP BY product_id HAVING customer_id = 63 AND country IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT order_id, string FROM zcorder1 GROUP BY product_id HAVING string LIKE 'zhuchen%'")
	mcmp.ExecAndNotEmpty("SELECT order_id, total_amount, SUM(quantity) AS total_quantity FROM zcorder1 GROUP BY customer_id HAVING total_amount >= 100 AND total_quantity != 0")
	mcmp.ExecAndNotEmpty("SELECT order_id, unit_price FROM zcorder1 GROUP BY customer_id HAVING unit_price < 50")
	mcmp.ExecAndNotEmpty("SELECT order_id, total_amount FROM zcorder1 GROUP BY customer_id HAVING total_amount BETWEEN 100 AND 500")
	mcmp.ExecAndNotEmpty("SELECT order_id, customer_id FROM zcorder1 GROUP BY customer_id HAVING customer_id IN (63, 72, 85)")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(*) AS count FROM zcorder1 GROUP BY customer_id HAVING count >= 1")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(sequence_id) AS max_seq FROM zcorder1 GROUP BY customer_id HAVING max_seq < 10")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(quantity) AS min_quantity FROM zcorder1 GROUP BY customer_id HAVING min_quantity > 0")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(unit_price) AS max_price FROM zcorder1 GROUP BY customer_id HAVING max_price > 100")
	mcmp.ExecAndNotEmpty("SELECT order_id, SUM(quantity) AS total_quantity FROM zcorder1 GROUP BY customer_id HAVING total_quantity >= 50")
	mcmp.ExecAndNotEmpty("SELECT order_id, country FROM zcorder1 GROUP BY customer_id HAVING country IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(total_amount) AS max_amount FROM zcorder1 GROUP BY product_id HAVING max_amount BETWEEN 1 AND 1000")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(*) AS count FROM zcorder1 GROUP BY product_id HAVING count = 1")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(unit_price) AS min_price FROM zcorder1 GROUP BY product_id HAVING min_price < 20")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(product_id) AS max_product FROM zcorder1 GROUP BY product_id HAVING max_product IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(*) AS count FROM zcorder1 GROUP BY product_id HAVING count >= 1")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(total_amount) AS min_amount FROM zcorder1 GROUP BY product_id HAVING min_amount > 50")
	mcmp.ExecAndNotEmpty("SELECT order_id, SUM(unit_price) AS total_price FROM zcorder1 GROUP BY product_id HAVING total_price > 10")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(customer_id) AS min_customer FROM zcorder1 GROUP BY product_id HAVING min_customer = 63")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(quantity) AS max_quantity FROM zcorder1 GROUP BY product_id HAVING max_quantity > 20")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 GROUP BY product_id HAVING distinct_products >= 1")
	mcmp.ExecAndNotEmpty("SELECT order_id, SUM(total_amount) AS total_sales FROM zcorder1 GROUP BY product_id HAVING total_sales < 1000")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(sequence_id) AS min_seq FROM zcorder1 GROUP BY product_id HAVING min_seq >= 1")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(*) AS count FROM zcorder1 GROUP BY product_id HAVING count >= 1")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(total_amount) AS max_amount FROM zcorder1 GROUP BY product_id HAVING max_amount < 500")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(unit_price) AS min_price FROM zcorder1 GROUP BY product_id HAVING min_price < 5.00")
	mcmp.ExecAndNotEmpty("SELECT order_id, SUM(total_amount) AS total_sales FROM zcorder1 GROUP BY product_id HAVING total_sales BETWEEN 10 AND 10000")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(sequence_id) AS max_seq FROM zcorder1 GROUP BY product_id HAVING max_seq > 5")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(quantity) AS min_quantity FROM zcorder1 GROUP BY product_id HAVING min_quantity > 3")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(unit_price) AS max_price FROM zcorder1 GROUP BY product_id HAVING max_price < 80")
	mcmp.ExecAndNotEmpty("SELECT order_id, SUM(quantity) AS total_quantity FROM zcorder1 GROUP BY product_id HAVING total_quantity > 30")
	mcmp.ExecAndNotEmpty("SELECT order_id, country FROM zcorder1 GROUP BY product_id HAVING country IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(total_amount) AS max_amount FROM zcorder1 GROUP BY product_id HAVING max_amount > 10")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(*) AS count FROM zcorder1 GROUP BY product_id HAVING count <= 4")
	mcmp.ExecAndNotEmpty("SELECT order_id, MIN(unit_price) AS min_price FROM zcorder1 GROUP BY product_id HAVING min_price > 10")
	mcmp.ExecAndNotEmpty("SELECT order_id, MAX(product_id) AS max_product FROM zcorder1 GROUP BY product_id HAVING max_product IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT MAX(quantity) AS max_quantity FROM zcorder1 HAVING max_quantity > 20")
	mcmp.ExecAndNotEmpty("SELECT COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 HAVING distinct_products >= 1")
	mcmp.ExecAndNotEmpty("SELECT SUM(total_amount) AS total_sales FROM zcorder1 HAVING total_sales > 1000")
	mcmp.ExecAndNotEmpty("SELECT MIN(sequence_id) AS min_seq FROM zcorder1 HAVING min_seq >= 1")
	mcmp.ExecAndNotEmpty("SELECT COUNT(*) AS count FROM zcorder1 HAVING count <= 2000")
	mcmp.ExecAndNotEmpty("SELECT MAX(total_amount) AS max_amount FROM zcorder1 HAVING max_amount > 9")
	mcmp.ExecAndNotEmpty("SELECT MIN(unit_price) AS min_price FROM zcorder1 HAVING min_price <= 2.00")
	mcmp.ExecAndNotEmpty("SELECT SUM(total_amount) AS total_sales FROM zcorder1 HAVING total_sales BETWEEN 9 AND 10000")
	mcmp.ExecAndNotEmpty("SELECT MAX(sequence_id) AS max_seq FROM zcorder1 HAVING max_seq > 5")
	mcmp.ExecAndNotEmpty("SELECT MIN(quantity) AS min_quantity FROM zcorder1 HAVING min_quantity <= 3")
	mcmp.ExecAndNotEmpty("SELECT MAX(unit_price) AS max_price FROM zcorder1 HAVING max_price <= 202.11")
	mcmp.ExecAndNotEmpty("SELECT SUM(quantity) AS total_quantity FROM zcorder1 HAVING total_quantity > 30")
	mcmp.ExecAndNotEmpty("SELECT country FROM zcorder1 HAVING country IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT MAX(total_amount) AS max_amount FROM zcorder1 HAVING max_amount > 100")
	mcmp.ExecAndNotEmpty("SELECT COUNT(*) AS count FROM zcorder1 HAVING count >= 1")
	mcmp.ExecAndNotEmpty("SELECT MIN(unit_price) AS min_price FROM zcorder1 HAVING min_price >= 2.00")
	mcmp.ExecAndNotEmpty("SELECT MAX(product_id) AS max_product FROM zcorder1 HAVING max_product IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT MAX(quantity) AS max_quantity FROM zcorder1 HAVING max_quantity > 20")
	mcmp.ExecAndNotEmpty("SELECT COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 HAVING distinct_products >= 3")
	mcmp.ExecAndNotEmpty("SELECT SUM(total_amount) AS total_sales FROM zcorder1 HAVING total_sales >= 1000")
	mcmp.ExecAndNotEmpty("SELECT MIN(unit_price) AS min_price FROM zcorder1 HAVING min_price > 1.01")
	mcmp.ExecAndNotEmpty("SELECT SUM(total_amount) AS total_sales FROM zcorder1 HAVING total_sales BETWEEN 10 AND 2000000")
	mcmp.ExecAndNotEmpty("SELECT MAX(sequence_id) AS max_seq FROM zcorder1 HAVING max_seq > 5")
	mcmp.ExecAndNotEmpty("SELECT MIN(quantity) AS min_quantity FROM zcorder1 HAVING min_quantity >= 1")
	mcmp.ExecAndNotEmpty("SELECT MAX(total_amount) AS max_amount FROM zcorder1 HAVING max_amount > 100")
	mcmp.ExecAndNotEmpty("SELECT COUNT(*) AS count FROM zcorder1 HAVING count <= 100")
	mcmp.ExecAndNotEmpty("SELECT MIN(unit_price) AS min_price FROM zcorder1 HAVING min_price > 1.00")
	mcmp.ExecAndNotEmpty("SELECT MAX(unit_price) AS max_price FROM zcorder1 HAVING max_price < 800")
	mcmp.ExecAndNotEmpty("SELECT SUM(quantity) AS total_quantity FROM zcorder1 HAVING total_quantity > 30")
	mcmp.ExecAndNotEmpty("SELECT MAX(total_amount) AS max_amount FROM zcorder1 HAVING max_amount > 8.00")
	mcmp.ExecAndNotEmpty("SELECT COUNT(*) AS count FROM zcorder1 HAVING count > 4")
	mcmp.ExecAndNotEmpty("SELECT MIN(unit_price) AS min_price FROM zcorder1 HAVING min_price > 1.00")
	mcmp.ExecAndNotEmpty("SELECT SUM(quantity) AS total_quantity FROM zcorder1 HAVING total_quantity > 1")
	mcmp.ExecAndNotEmpty("SELECT MIN(sequence_id) AS min_seq FROM zcorder1 HAVING min_seq <= 100")
	mcmp.ExecAndNotEmpty("SELECT MAX(product_id) AS max_product FROM zcorder1 HAVING max_product IS NOT NULL")
	mcmp.ExecAndNotEmpty("SELECT COUNT(DISTINCT customer_id) AS distinct_customers FROM zcorder1 HAVING distinct_customers >= 10")
	mcmp.ExecAndNotEmpty("SELECT SUM(total_amount) AS total_sales FROM zcorder1 HAVING total_sales > 50")
	mcmp.ExecAndNotEmpty("SELECT MIN(quantity) AS min_quantity FROM zcorder1 HAVING min_quantity >= 1")
	mcmp.ExecAndNotEmpty("SELECT MAX(unit_price) AS max_price FROM zcorder1 HAVING max_price <= 210.11")
	mcmp.ExecAndNotEmpty("SELECT COUNT(*) AS count FROM zcorder1 HAVING count > 20")
	mcmp.ExecAndNotEmpty("SELECT MIN(total_amount) AS min_amount FROM zcorder1 HAVING min_amount >= 10")
	mcmp.ExecAndNotEmpty("SELECT MAX(sequence_id) AS max_seq FROM zcorder1 HAVING max_seq < 10000")
	mcmp.ExecAndNotEmpty("SELECT SUM(quantity) AS total_quantity FROM zcorder1 HAVING total_quantity >= 50")
	mcmp.ExecAndNotEmpty("SELECT MIN(unit_price) AS min_price FROM zcorder1 HAVING min_price < 20")
	mcmp.ExecAndNotEmpty("SELECT MAX(total_amount) AS max_amount FROM zcorder1 HAVING max_amount BETWEEN 20 AND 1000")
	mcmp.ExecAndNotEmpty("SELECT COUNT(*) AS count FROM zcorder1 HAVING count >= 20")
	mcmp.ExecAndNotEmpty("SELECT MIN(quantity) AS min_quantity FROM zcorder1 HAVING min_quantity > 0")
	mcmp.ExecAndNotEmpty("SELECT MAX(unit_price) AS max_price FROM zcorder1 HAVING max_price < 300.00")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount FROM zcorder1 WHERE customer_id < 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount FROM zcorder1 WHERE customer_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount FROM zcorder1 WHERE customer_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT unit_price FROM zcorder1 WHERE customer_id < 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT unit_price FROM zcorder1 WHERE customer_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price FROM zcorder1 WHERE customer_id < 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price FROM zcorder1 WHERE customer_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price FROM zcorder1 WHERE customer_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price,country FROM zcorder1 WHERE customer_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price,country FROM zcorder1 WHERE customer_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 WHERE customer_id > 10 GROUP BY product_id;")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 WHERE product_id = 10 GROUP BY product_id;")
	mcmp.ExecAndNotEmpty("SELECT COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 WHERE customer_id = 20")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount FROM zcorder1 WHERE product_id < 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount FROM zcorder1 WHERE product_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount FROM zcorder1 WHERE product_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT unit_price FROM zcorder1 WHERE product_id < 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT unit_price FROM zcorder1 WHERE product_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT unit_price FROM zcorder1 WHERE product_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price FROM zcorder1 WHERE product_id < 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price FROM zcorder1 WHERE product_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price FROM zcorder1 WHERE product_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price,country FROM zcorder1 WHERE product_id = 10;")
	mcmp.ExecAndNotEmpty("SELECT DISTINCT total_amount,unit_price,country FROM zcorder1 WHERE product_id > 10;")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 WHERE product_id > 10 GROUP BY product_id;")
	mcmp.ExecAndNotEmpty("SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 WHERE product_id = 10 GROUP BY product_id;")
	mcmp.ExecAndNotEmpty("SELECT COUNT(DISTINCT product_id) AS distinct_products FROM zcorder1 WHERE product_id = 20")

}
