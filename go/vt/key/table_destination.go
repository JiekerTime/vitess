/*
Copyright 2019 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package key

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"math/rand"
	"vitess.io/vitess/go/vt/vtgate/tableindexes"

	"vitess.io/vitess/go/vt/vterrors"

	vtrpcpb "vitess.io/vitess/go/vt/proto/vtrpc"
)

// TableDestination is an interface definition for a query destination,
// within a given logic table . It is meant to be an internal
// data structure, with multiple possible implementations.
type TableDestination interface {
	// Resolve calls the callback for every table Destination
	// resolves into, given the table list.
	// The returned error must be generated by vterrors.
	Resolve(*tableindexes.LogicTableConfig, func(actualTableIndex uint64) error) error

	// String returns a printable version of the Destination.
	String() string
}

// TableDestinationsString returns a printed version of the destination array.
func TableDestinationsString(destinations []Destination) string {
	var buffer bytes.Buffer
	buffer.WriteString("Destinations:")
	for i, d := range destinations {
		if i > 0 {
			buffer.WriteByte(',')
		}
		buffer.WriteString(d.String())
	}
	return buffer.String()
}

//
// DestinationShard
//

// DestinationTable is the destination for a single Shard.
// It implements the Destination interface.
type DestinationTable string

// Resolve is part of the Destination interface.
func (d DestinationTable) Resolve(tables *tableindexes.LogicTableConfig, addTable func(table string) error) error {
	return addTable(string(d))
}

// String is part of the Destination interface.
func (d DestinationTable) String() string {
	return "DestinationTable(" + string(d) + ")"
}

// DestinationAllTables
type DestinationAllTables struct{}

// Resolve is part of the Destination interface.
func (d DestinationAllTables) Resolve(tables *tableindexes.LogicTableConfig, addTable func(actualTableIndex uint64) error) error {
	for _, shard := range tables.ActualTableList {
		if err := addTable(uint64(shard.Index)); err != nil {
			return err
		}
	}
	return nil
}

// String is part of the Destination interface.
func (d DestinationAllTables) String() string {
	return "DestinationAllTables()"
}

// DestinationAnyTables
type DestinationAnyTables struct{}

// Resolve is part of the Destination interface.
func (d DestinationAnyTables) Resolve(tables *tableindexes.LogicTableConfig, addTable func(actualTableIndex uint64) error) error {
	if len(tables.ActualTableList) == 0 {
		return vterrors.Errorf(vtrpcpb.Code_UNAVAILABLE, "no table in keyspace")
	}

	return addTable(uint64(rand.Intn(len(tables.ActualTableList))))
}

// String is part of the Destination interface.
func (d DestinationAnyTables) String() string {
	return "DestinationAnyTables()"
}

// DestinationTables is the destination for multiple shards.
// It implements the Destination interface.
type DestinationTables []uint64

// Resolve is part of the Destination interface.
func (d DestinationTables) Resolve(tables *tableindexes.LogicTableConfig, addTable func(table uint64) error) error {
	for _, shard := range d {
		if err := addTable(shard); err != nil {
			return err
		}
	}
	return nil
}

// String is part of the Destination interface.
func (d DestinationTables) String() string {
	return "DestinationTables"
}

//
// DestinationKeyspaceID
//

// TableDestinationKeyspaceID is the destination for a single KeyspaceID.
// It implements the Destination interface.
type TableDestinationKeyspaceID []byte

// Resolve is part of the Destination interface.
func (d TableDestinationKeyspaceID) Resolve(tables *tableindexes.LogicTableConfig, addTable func(table uint64) error) error {
	table, err := GetTableIndexForKeyspaceID(tables, d)
	if err != nil {
		return err
	}
	return addTable(table)
}

// String is part of the Destination interface.
func (d TableDestinationKeyspaceID) String() string {
	return "DestinationKeyspaceID(" + hex.EncodeToString(d) + ")"
}

// GetTableIndexForKeyspaceID finds the right shard for a keyspace id.
func GetTableIndexForKeyspaceID(tables *tableindexes.LogicTableConfig, keyspaceID []byte) (uint64, error) {
	//return binary.BigEndian.Uint64(keyspaceID), nil
	return binary.BigEndian.Uint64(keyspaceID) % uint64(tables.TableCount), nil
}

//
// DestinationModKeyspaceID
//

// TableDestinationModKeyspaceID is the destination for a single KeyspaceID.
// It implements the Destination interface.
type TableDestinationModKeyspaceID []byte

// Resolve is part of the Destination interface.
func (d TableDestinationModKeyspaceID) Resolve(tables *tableindexes.LogicTableConfig, addTable func(table string) error) error {
	table, err := GetTableForModKeyspaceID(tables, d)
	if err != nil {
		return err
	}
	return addTable(table)
}

// String is part of the Destination interface.
func (d TableDestinationModKeyspaceID) String() string {
	return "DestinationKeyspaceID(" + hex.EncodeToString(d) + ")"
}

// GetTableForModKeyspaceID finds the right shard for a keyspace id.
func GetTableForModKeyspaceID(allShards *tableindexes.LogicTableConfig, modKeyspaceID []byte) (string, error) {

	return "", vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "KeyspaceId %v didn't match any shards %+v", hex.EncodeToString(modKeyspaceID), allShards)
}

//
// DestinationNone
//

// TableDestinationNone is a destination that doesn't resolve to any shard.
// It implements the Destination interface.
type TableDestinationNone struct{}

// Resolve is part of the Destination interface.
func (d TableDestinationNone) Resolve(allShards *tableindexes.LogicTableConfig, addTable func(table uint64) error) error {
	return nil
}

// String is part of the TableDestination interface.
func (d TableDestinationNone) String() string {
	return "TableDestinationNone()"
}
