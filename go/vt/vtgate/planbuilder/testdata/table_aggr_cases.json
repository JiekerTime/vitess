[
  {
    "comment": "scatter aggregate with non-aggregate expressions.",
    "query": "select id, count(*) from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) from t_user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "any_value(0) AS id, sum_count_star(1) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, count(*) from t_user_0 where 1 != 1",
            "Query": "select id, count(*) from t_user",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate order by null",
    "query": "select count(*) from t_user order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user order by null",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from t_user_0 where 1 != 1",
            "Query": "select count(*) from t_user",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate symtab lookup error",
    "query": "select id, b as id, count(*) from t_user order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, b as id, count(*) from t_user order by id",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(1|3) ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS id, any_value(1) AS id, sum_count_star(2) AS count(*), any_value(3)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, b as id, count(*), weight_string(b) from t_user_0 where 1 != 1",
                "Query": "select id, b as id, count(*), weight_string(b) from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by select col",
    "query": "select col from t_user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from t_user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from t_user_0 where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col from t_user group by col order by col asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate multiple group by (columns)",
    "query": "select a, b, count(*) from t_user group by a, b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from t_user group by a, b",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "(0|3), (1|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(a), weight_string(b) from t_user_0 where 1 != 1 group by a, b, weight_string(a), weight_string(b)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select a, b, count(*), weight_string(a), weight_string(b) from t_user group by a, b, weight_string(a), weight_string(b) order by a asc, b asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate multiple group by (numbers)",
    "query": "select a, b, count(*) from t_user group by 2, 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from t_user group by 2, 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "(1|3), (0|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(b), weight_string(a) from t_user_0 where 1 != 1 group by b, a, weight_string(b), weight_string(a)",
            "OrderBy": "(1|3) ASC, (0|4) ASC",
            "Query": "select a, b, count(*), weight_string(b), weight_string(a) from t_user group by b, a, weight_string(b), weight_string(a) order by b asc, a asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by aggregate function",
    "query": "select count(*) b from t_user group by b",
    "plan": "VT03005: cannot group on 'count(*)'"
  },
  {
    "comment": "scatter aggregate multiple group by columns inverse order",
    "query": "select a, b, count(*) from t_user group by b, a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from t_user group by b, a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "(1|3), (0|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(b), weight_string(a) from t_user_0 where 1 != 1 group by b, a, weight_string(b), weight_string(a)",
            "OrderBy": "(1|3) ASC, (0|4) ASC",
            "Query": "select a, b, count(*), weight_string(b), weight_string(a) from t_user group by b, a, weight_string(b), weight_string(a) order by b asc, a asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by column number",
    "query": "select col from t_user group by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from t_user group by 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from t_user_0 where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col from t_user group by col order by col asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by invalid column number",
    "query": "select col from t_user group by 2",
    "plan": "Unknown column '2' in 'group statement'"
  },
  {
    "comment": "scatter aggregate with numbered order by columns",
    "query": "select a, b, c, d, count(*) from t_user group by 1, 2, 3 order by 1, 2, 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from t_user group by 1, 2, 3 order by 1, 2, 3",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(3) AS d, sum_count_star(4) AS count(*)",
        "GroupBy": "(0|5), (1|6), (2|7)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from t_user_0 where 1 != 1 group by a, b, c, weight_string(a), weight_string(b), weight_string(c)",
            "OrderBy": "(0|5) ASC, (1|6) ASC, (2|7) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from t_user group by a, b, c, weight_string(a), weight_string(b), weight_string(c) order by a asc, b asc, c asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with named order by columns",
    "query": "select a, b, c, d, count(*) from t_user group by 1, 2, 3 order by a, b, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from t_user group by 1, 2, 3 order by a, b, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(3) AS d, sum_count_star(4) AS count(*)",
        "GroupBy": "(0|5), (1|6), (2|7)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from t_user_0 where 1 != 1 group by a, b, c, weight_string(a), weight_string(b), weight_string(c)",
            "OrderBy": "(0|5) ASC, (1|6) ASC, (2|7) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from t_user group by a, b, c, weight_string(a), weight_string(b), weight_string(c) order by a asc, b asc, c asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with jumbled order by columns",
    "query": "select a, b, c, d, count(*) from t_user group by 1, 2, 3, 4 order by d, b, a, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from t_user group by 1, 2, 3, 4 order by d, b, a, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(4) AS count(*)",
        "GroupBy": "(3|5), (1|6), (0|7), (2|8)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from t_user_0 where 1 != 1 group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c)",
            "OrderBy": "(3|5) ASC, (1|6) ASC, (0|7) ASC, (2|8) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from t_user group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c) order by d asc, b asc, a asc, c asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with jumbled group by and order by columns",
    "query": "select a, b, c, d, count(*) from t_user group by 3, 2, 1, 4 order by d, b, a, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from t_user group by 3, 2, 1, 4 order by d, b, a, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(4) AS count(*)",
        "GroupBy": "(3|5), (1|6), (0|7), (2|8)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from t_user_0 where 1 != 1 group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c)",
            "OrderBy": "(3|5) ASC, (1|6) ASC, (0|7) ASC, (2|8) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from t_user group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c) order by d asc, b asc, a asc, c asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with some descending order by cols",
    "query": "select a, b, c, count(*) from t_user group by 3, 2, 1 order by 1 desc, 3 desc, b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, count(*) from t_user group by 3, 2, 1 order by 1 desc, 3 desc, b",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(3) AS count(*)",
        "GroupBy": "(0|4), (2|5), (1|6)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, count(*), weight_string(a), weight_string(c), weight_string(b) from t_user_0 where 1 != 1 group by a, c, b, weight_string(a), weight_string(c), weight_string(b)",
            "OrderBy": "(0|4) DESC, (2|5) DESC, (1|6) ASC",
            "Query": "select a, b, c, count(*), weight_string(a), weight_string(c), weight_string(b) from t_user group by a, c, b, weight_string(a), weight_string(c), weight_string(b) order by a desc, c desc, b asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "invalid order by column numner for scatter",
    "query": "select col, count(*) from t_user group by col order by 5 limit 10",
    "plan": "Unknown column '5' in 'order clause'"
  },
  {
    "comment": "aggregate with limit",
    "query": "select col, count(*) from t_user group by col limit 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from t_user group by col limit 10",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "INT64(10)",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*) from t_user_0 where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*) from t_user group by col order by col asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group by with collate operator",
    "query": "select t_user.col1 as a from t_user where t_user.id = 5 group by a collate utf8_general_ci",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t_user.col1 as a from t_user where t_user.id = 5 group by a collate utf8_general_ci",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS a",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "OrderBy": "(1|2) ASC",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select t_user_0.col1 as a, a collate utf8_general_ci, weight_string(a collate utf8_general_ci) from t_user_0 where 1 != 1 group by a collate utf8_general_ci, weight_string(a collate utf8_general_ci)",
            "Query": "select t_user.col1 as a, a collate utf8_general_ci, weight_string(a collate utf8_general_ci) from t_user where t_user.id = 5 group by a collate utf8_general_ci, weight_string(a collate utf8_general_ci) order by a collate utf8_general_ci asc",
            "Table": "t_user",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group by invalid column number (code is duplicated from symab).",
    "query": "select id from t_user group by 1.1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user group by 1.1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS id",
        "GroupBy": "1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, 1.1 from t_user_0 where 1 != 1 group by 1.1",
            "OrderBy": "1 ASC",
            "Query": "select id, 1.1 from t_user group by 1.1 order by 1.1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group by out of range column number (code is duplicated from symab).",
    "query": "select id from t_user group by 2",
    "plan": "Unknown column '2' in 'group statement'"
  },
  {
    "comment": "aggregate query with order by aggregate column along with NULL",
    "query": "select col, count(*) k from t_user group by col order by null, k",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) k from t_user group by col order by null, k",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS k",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*) as k from t_user_0 where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*) as k from t_user group by col order by col asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "aggregate query with order by NULL",
    "query": "select col, count(*) k from t_user group by col order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) k from t_user group by col order by null",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS k",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) as k from t_user_0 where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) as k from t_user group by col order by col asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "weight_string addition to group by",
    "query": "select lower(textcol1) as v, count(*) from t_user group by v",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select lower(textcol1) as v, count(*) from t_user group by v",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select lower(textcol1) as v, count(*), weight_string(lower(textcol1)) from t_user_0 where 1 != 1 group by v, weight_string(lower(textcol1))",
            "OrderBy": "(0|2) ASC",
            "Query": "select lower(textcol1) as v, count(*), weight_string(lower(textcol1)) from t_user group by v, weight_string(lower(textcol1)) order by v asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "weight_string addition to group by when also there in order by",
    "query": "select char_length(texcol1) as a, count(*) from t_user group by a order by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select char_length(texcol1) as a, count(*) from t_user group by a order by a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select char_length(texcol1) as a, count(*), weight_string(char_length(texcol1)) from t_user_0 where 1 != 1 group by a, weight_string(char_length(texcol1))",
            "OrderBy": "(0|2) ASC",
            "Query": "select char_length(texcol1) as a, count(*), weight_string(char_length(texcol1)) from t_user group by a, weight_string(char_length(texcol1)) order by a asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "group by column alias",
    "query": "select ascii(val1) as a, count(*) from t_user group by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ascii(val1) as a, count(*) from t_user group by a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select ascii(val1) as a, count(*), weight_string(ascii(val1)) from t_user_0 where 1 != 1 group by a, weight_string(ascii(val1))",
            "OrderBy": "(0|2) ASC",
            "Query": "select ascii(val1) as a, count(*), weight_string(ascii(val1)) from t_user group by a, weight_string(ascii(val1)) order by a asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "group_concat on single shards",
    "query": "select group_concat(user_id order by name), id from t_user group by id, col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select group_concat(user_id order by name), id from t_user group by id, col",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select group_concat(user_id order by `name` asc), id from t_user_0 where 1 != 1 group by id, col",
        "Query": "select group_concat(user_id order by `name` asc), id from t_user group by id, col",
        "Table": "t_user"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Scatter order by is complex with aggregates in select",
    "query": "select col, count(*) from t_user group by col order by col+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from t_user group by col order by col+1",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(2|3) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*), any_value(2) AS col + 1, any_value(3)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*), col + 1, weight_string(col + 1) from t_user_0 where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*), col + 1, weight_string(col + 1) from t_user group by col order by col asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scatter aggregate complex order by",
    "query": "select id,col from t_user group by id,col order by id+1,col+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user group by id,col order by id+1,col+1",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, col, id + 1, col + 1, weight_string(id + 1), weight_string(col + 1) from t_user_0 where 1 != 1 group by id, col",
        "OrderBy": "(2|4) ASC, (3|5) ASC",
        "Query": "select id, col, id + 1, col + 1, weight_string(id + 1), weight_string(col + 1) from t_user group by id, col order by id + 1 asc, col + 1 asc",
        "ResultColumns": 2,
        "Table": "t_user"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "select expression does not directly depend on grouping expression",
    "query": "select a from t_user group by a+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a from t_user group by a+1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS a",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, a + 1, weight_string(a + 1) from t_user_0 where 1 != 1 group by a + 1, weight_string(a + 1)",
            "OrderBy": "(1|2) ASC",
            "Query": "select a, a + 1, weight_string(a + 1) from t_user group by a + 1, weight_string(a + 1) order by a + 1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "redundant group by columns are not added",
    "query": "select col, val, id from t_user group by col, val, id, id, val, col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, val, id from t_user group by col, val, id, id, val, col",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, val, id from t_user_0 where 1 != 1 group by col, val, id",
        "Query": "select col, val, id from t_user group by col, val, id",
        "Table": "t_user"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "using a grouping column multiple times should be OK",
    "query": "select col, col, count(*) from t_user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, col, count(*) from t_user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, col, count(*) from t_user_0 where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, col, count(*) from t_user group by col order by col asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "use vindex and table index group by",
    "query": "select id,col from t_user group by id,col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user group by id,col",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, col from t_user_0 where 1 != 1 group by id, col",
        "Query": "select id, col from t_user group by id, col",
        "Table": "t_user"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "use unique vindex group by, split table plan generate Aggregation",
    "query": "select id,col from t_user group by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user group by id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(1) AS col",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, col, weight_string(id) from t_user_0 where 1 != 1 group by id, weight_string(id)",
            "OrderBy": "(0|2) ASC",
            "Query": "select id, col, weight_string(id) from t_user group by id, weight_string(id) order by id asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "use unique vindex group by, split table plan generate Aggregation",
    "query": "select id,col from t_user group by b, id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user group by b, id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(1) AS col",
        "GroupBy": "(2|3), (0|4)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, col, b, weight_string(b), weight_string(id) from t_user_0 where 1 != 1 group by b, id, weight_string(b), weight_string(id)",
            "OrderBy": "(2|3) ASC, (0|4) ASC",
            "Query": "select id, col, b, weight_string(b), weight_string(id) from t_user group by b, id, weight_string(b), weight_string(id) order by b asc, id asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "use unique vindex group by, split table plan generate Aggregation",
    "query": "select id,col from t_user group by id, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user group by id, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(1) AS col",
        "GroupBy": "(0|2), (3|4)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, col, weight_string(id), c, weight_string(c) from t_user_0 where 1 != 1 group by id, c, weight_string(id), weight_string(c)",
            "OrderBy": "(0|2) ASC, (3|4) ASC",
            "Query": "select id, col, weight_string(id), c, weight_string(c) from t_user group by id, c, weight_string(id), weight_string(c) order by id asc, c asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "EqualUnique Select, split table plan generate Aggregation",
    "query": "select id,col from t_user where id = 1024 group by c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user where id = 1024 group by c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS id, any_value(1) AS col",
        "GroupBy": "(2|3)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, col, c, weight_string(c) from t_user_0 where 1 != 1 group by c, weight_string(c)",
            "OrderBy": "(2|3) ASC",
            "Query": "select id, col, c, weight_string(c) from t_user where id = 1024 group by c, weight_string(c) order by c asc",
            "Table": "t_user",
            "Values": [
              "INT64(1024)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "EqualUnique Select, use table index group by",
    "query": "select id,col from t_user where id = 1024 group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user where id = 1024 group by col",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "EqualUnique-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, col from t_user_0 where 1 != 1 group by col",
        "Query": "select id, col from t_user where id = 1024 group by col",
        "Table": "t_user",
        "Values": [
          "INT64(1024)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "EqualUnique Select, use table index group by",
    "query": "select id,col from t_user where id = 1024 group by c, col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id,col from t_user where id = 1024 group by c, col",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "EqualUnique-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, col from t_user_0 where 1 != 1 group by c, col",
        "Query": "select id, col from t_user where id = 1024 group by c, col",
        "Table": "t_user",
        "Values": [
          "INT64(1024)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group By X Order By X",
    "query": "SELECT t_user.intcol FROM t_user GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT t_user.intcol FROM t_user GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS count(t_user.intcol)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t_user_0.intcol, count(t_user_0.intcol) from t_user_0 where 1 != 1 group by t_user_0.intcol",
                "OrderBy": "0 ASC",
                "Query": "select t_user.intcol, count(t_user.intcol) from t_user group by t_user.intcol order by t_user.intcol asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group By X Order By X, vindex EqualUnique",
    "query": "SELECT t_user.intcol FROM t_user where id = 1536 GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT t_user.intcol FROM t_user where id = 1536 GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS count(t_user.intcol)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "EqualUnique-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t_user_0.intcol, count(t_user_0.intcol) from t_user_0 where 1 != 1 group by t_user_0.intcol",
                "OrderBy": "0 ASC",
                "Query": "select t_user.intcol, count(t_user.intcol) from t_user where id = 1536 group by t_user.intcol order by t_user.intcol asc",
                "Table": "t_user",
                "Values": [
                  "INT64(1536)"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group By X Order By X, table index EqualUnique",
    "query": "SELECT t_user.intcol FROM t_user where col = 45 GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT t_user.intcol FROM t_user where col = 45 GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS count(t_user.intcol)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "OrderBy": "0 ASC",
                "FieldQuery": "select t_user_0.intcol, count(t_user_0.intcol) from t_user_0 where 1 != 1 group by t_user_0.intcol",
                "Query": "select t_user.intcol, count(t_user.intcol) from t_user where col = 45 group by t_user.intcol order by t_user.intcol asc",
                "Table": "t_user",
                "TableValues": [
                  "INT64(45)"
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Group By X Order By X, vindex EqualUnique, table index EqualUnique",
    "query": "SELECT t_user.intcol FROM t_user where col = 45 and id = 1320 GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT t_user.intcol FROM t_user where col = 45 and id = 1320 GROUP BY t_user.intcol ORDER BY COUNT(t_user.intcol)",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "EqualUnique-EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t_user_0.intcol from t_user_0 where 1 != 1 group by t_user_0.intcol",
        "Query": "select t_user.intcol from t_user where col = 45 and id = 1320 group by t_user.intcol order by count(t_user.intcol) asc",
        "Table": "t_user",
        "TableValues": [
          "INT64(45)"
        ],
        "Values": [
          "INT64(1320)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "count(*) spread across join",
    "query": "select count(*) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_foo": 1
                },
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                    "Query": "select count(*), t_user.foo from t_user group by t_user.foo",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra where t_user_extra.bar = :t_user_foo group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "sum spread across join",
    "query": "select sum(t_user.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(t_user.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(t_user.col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as sum(t_user.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_foo": 1
                },
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select sum(t_user_0.col), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                    "Query": "select sum(t_user.col), t_user.foo from t_user group by t_user.foo",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra where t_user_extra.bar = :t_user_foo group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "count spread across join",
    "query": "select count(t_user.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(t_user.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(t_user.col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(t_user.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_foo": 1
                },
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(t_user_0.col), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                    "Query": "select count(t_user.col), t_user.foo from t_user group by t_user.foo",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra where t_user_extra.bar = :t_user_foo group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "max spread across join",
    "query": "select max(t_user.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max(t_user.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0) AS max(t_user.col)",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "JoinVars": {
              "t_user_foo": 1
            },
            "TableName": "t_user_t_user_extra",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select max(t_user_0.col), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                "Query": "select max(t_user.col), t_user.foo from t_user group by t_user.foo",
                "Table": "t_user"
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from t_user_extra_0 where 1 != 1 group by .0",
                "Query": "select 1 from t_user_extra where t_user_extra.bar = :t_user_foo group by .0",
                "Table": "t_user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "min spread across join RHS",
    "query": "select min(t_user_extra.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select min(t_user_extra.col) from t_user join t_user_extra on t_user.foo = t_user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "min(0) AS min(t_user_extra.col)",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0",
            "JoinVars": {
              "t_user_foo": 0
            },
            "TableName": "t_user_t_user_extra",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                "Query": "select t_user.foo from t_user group by t_user.foo",
                "Table": "t_user"
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select min(t_user_extra_0.col) from t_user_extra_0 where 1 != 1 group by .0",
                "Query": "select min(t_user_extra.col) from t_user_extra where t_user_extra.bar = :t_user_foo group by .0",
                "Table": "t_user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Grouping on join",
    "query": "select t_user.a from t_user join t_user_extra group by t_user.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t_user.a from t_user join t_user_extra group by t_user.a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "(0|1)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "t_user_t_user_extra",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t_user_0.a, weight_string(t_user_0.a) from t_user_0 where 1 != 1 group by t_user_0.a, weight_string(t_user_0.a)",
                "OrderBy": "(0|1) ASC",
                "Query": "select t_user.a, weight_string(t_user.a) from t_user group by t_user.a, weight_string(t_user.a) order by t_user.a asc",
                "Table": "t_user"
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from t_user_extra_0 where 1 != 1 group by .0",
                "Query": "select 1 from t_user_extra group by .0",
                "Table": "t_user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Aggregates and joins",
    "query": "select count(*) from t_user join t_user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user join t_user_extra",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_0 where 1 != 1",
                    "Query": "select count(*) from t_user",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Aggregate on join",
    "query": "select t_user.a, count(*) from t_user join t_user_extra group by t_user.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t_user.a, count(*) from t_user join t_user_extra group by t_user.a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 2] as a",
              "[COLUMN 0] * [COLUMN 1] as count(*)",
              "[COLUMN 3] as weight_string(t_user.a)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,L:1,L:2",
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.a, weight_string(t_user_0.a) from t_user_0 where 1 != 1 group by t_user_0.a, weight_string(t_user_0.a)",
                    "OrderBy": "(1|2) ASC",
                    "Query": "select count(*), t_user.a, weight_string(t_user.a) from t_user group by t_user.a, weight_string(t_user.a) order by t_user.a asc",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Aggregate on other table in join",
    "query": "select t_user.a, count(t_user_extra.a) from t_user join t_user_extra group by t_user.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t_user.a, count(t_user_extra.a) from t_user join t_user_extra group by t_user.a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count(1) AS count(t_user_extra.a)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 2] as a",
              "[COLUMN 1] * [COLUMN 0] as count(t_user_extra.a)",
              "[COLUMN 3] as weight_string(t_user.a)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0,L:0,L:1,L:2",
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.a, weight_string(t_user_0.a) from t_user_0 where 1 != 1 group by t_user_0.a, weight_string(t_user_0.a)",
                    "OrderBy": "(1|2) ASC",
                    "Query": "select count(*), t_user.a, weight_string(t_user.a) from t_user group by t_user.a, weight_string(t_user.a) order by t_user.a asc",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(t_user_extra_0.a) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(t_user_extra.a) from t_user_extra group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "group by and ',' joins with condition",
    "query": "select t_user.col from t_user join t_user_extra on t_user_extra.col = t_user.col group by t_user.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t_user.col from t_user join t_user_extra on t_user_extra.col = t_user.col group by t_user.id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS col",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,L:2",
            "JoinVars": {
              "t_user_col": 0
            },
            "TableName": "t_user_t_user_extra",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t_user_0.col, t_user_0.id, weight_string(t_user_0.id) from t_user_0 where 1 != 1 group by t_user_0.id, t_user_0.col, weight_string(t_user_0.id)",
                "OrderBy": "(1|2) ASC",
                "Query": "select t_user.col, t_user.id, weight_string(t_user.id) from t_user group by t_user.id, t_user.col, weight_string(t_user.id) order by t_user.id asc",
                "Table": "t_user"
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from t_user_extra_0 where 1 != 1 group by .0",
                "Query": "select 1 from t_user_extra where t_user_extra.col = :t_user_col group by .0",
                "TableValues": [
                  ":t_user_col"
                ],
                "Table": "t_user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Aggregation on column from inner side in a left join query",
    "query": "select count (u.id) from t_user u left join t_user_extra ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count (u.id) from t_user u left join t_user_extra ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(u.id)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(u.id)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "u_col": 1
                },
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(u.id), u.col from t_user_0 as u where 1 != 1 group by u.col",
                    "Query": "select count(u.id), u.col from t_user as u group by u.col",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-EqualUnique",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 as ue where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra as ue where ue.col = :u_col group by .0",
                    "TableValues": [
                      ":u_col"
                    ],
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Aggregation on outer side in a left join query",
    "query": "select count(ue.id) from t_user u left join t_user_extra ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(ue.id) from t_user u left join t_user_extra ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(ue.id)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 1] * [COLUMN 0] as count(ue.id)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "R:0,L:0",
                "JoinVars": {
                  "u_col": 1
                },
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), u.col from t_user_0 as u where 1 != 1 group by u.col",
                    "Query": "select count(*), u.col from t_user as u group by u.col",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-EqualUnique",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(ue.id) from t_user_extra_0 as ue where 1 != 1 group by .0",
                    "Query": "select count(ue.id) from t_user_extra as ue where ue.col = :u_col group by .0",
                    "TableValues": [
                      ":u_col"
                    ],
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "inner join with scalar aggregation",
    "query": "select count(*) from t_user join t_music on t_user.foo = t_music.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user join t_music on t_user.foo = t_music.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_foo": 1
                },
                "TableName": "t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                    "Query": "select count(*), t_user.foo from t_user group by t_user.foo",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_music where t_music.bar = :t_user_foo group by .0",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "left outer join with scalar aggregation",
    "query": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_foo": 1
                },
                "TableName": "t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                    "Query": "select count(*), t_user.foo from t_user group by t_user.foo",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_music where t_music.bar = :t_user_foo group by .0",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "inner join with left grouping",
    "query": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_user.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)",
              "[COLUMN 2] as col"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0,L:1",
                "JoinVars": {
                  "t_user_foo": 2
                },
                "TableName": "t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.col, t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.col, t_user_0.foo",
                    "OrderBy": "1 ASC",
                    "Query": "select count(*), t_user.col, t_user.foo from t_user group by t_user.col, t_user.foo order by t_user.col asc",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_music where t_music.bar = :t_user_foo group by .0",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "inner join with right grouping",
    "query": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_music.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_music.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)",
              "[COLUMN 2] as col",
              "[COLUMN 3] as weight_string(t_music.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(2|3) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "LeftJoin",
                    "JoinColumnIndexes": "L:0,R:0,R:1,R:2",
                    "JoinVars": {
                      "t_user_foo": 1
                    },
                    "TableName": "t_user_t_music",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                        "Query": "select count(*), t_user.foo from t_user group by t_user.foo",
                        "Table": "t_user"
                      },
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), t_music_0.col, weight_string(t_music_0.col) from t_music_0 where 1 != 1 group by t_music_0.col, weight_string(t_music_0.col)",
                        "Query": "select count(*), t_music.col, weight_string(t_music.col) from t_music where t_music.bar = :t_user_foo group by t_music.col, weight_string(t_music.col)",
                        "Table": "t_music"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "left outer join with left grouping",
    "query": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_user.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)",
              "[COLUMN 2] as col"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0,L:1",
                "JoinVars": {
                  "t_user_foo": 2
                },
                "TableName": "t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_0.col, t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.col, t_user_0.foo",
                    "OrderBy": "1 ASC",
                    "Query": "select count(*), t_user.col, t_user.foo from t_user group by t_user.col, t_user.foo order by t_user.col asc",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_music where t_music.bar = :t_user_foo group by .0",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "left outer join with right grouping",
    "query": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_music.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar group by t_music.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)",
              "[COLUMN 2] as col",
              "[COLUMN 3] as weight_string(t_music.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(2|3) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "LeftJoin",
                    "JoinColumnIndexes": "L:0,R:0,R:1,R:2",
                    "JoinVars": {
                      "t_user_foo": 1
                    },
                    "TableName": "t_user_t_music",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                        "Query": "select count(*), t_user.foo from t_user group by t_user.foo",
                        "Table": "t_user"
                      },
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), t_music_0.col, weight_string(t_music_0.col) from t_music_0 where 1 != 1 group by t_music_0.col, weight_string(t_music_0.col)",
                        "Query": "select count(*), t_music.col, weight_string(t_music.col) from t_music where t_music.bar = :t_user_foo group by t_music.col, weight_string(t_music.col)",
                        "Table": "t_music"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "3 table inner join with scalar aggregation",
    "query": "select count(*) from t_user join t_music on t_user.foo = t_music.bar join t_user_extra on t_user.foo = t_user_extra.baz",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user join t_music on t_user.foo = t_music.bar join t_user_extra on t_user.foo = t_user_extra.baz",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_extra_baz": 1
                },
                "TableName": "t_user_extra_t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), t_user_extra_0.baz from t_user_extra_0 where 1 != 1 group by t_user_extra_0.baz",
                    "Query": "select count(*), t_user_extra.baz from t_user_extra group by t_user_extra.baz",
                    "Table": "t_user_extra"
                  },
                  {
                    "OperatorType": "Projection",
                    "Expressions": [
                      "[COLUMN 0] * [COLUMN 1] as count(*)"
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "L:0,R:0",
                        "JoinVars": {
                          "t_user_foo": 1
                        },
                        "TableName": "t_user_t_music",
                        "Inputs": [
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                            "Query": "select count(*), t_user.foo from t_user where t_user.foo = :t_user_extra_baz group by t_user.foo",
                            "Table": "t_user"
                          },
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                            "Query": "select count(*) from t_music where t_music.bar = :t_user_foo group by .0",
                            "Table": "t_music"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "3 table with mixed join with scalar aggregation",
    "query": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar join t_user_extra on t_user.foo = t_user_extra.baz",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from t_user left join t_music on t_user.foo = t_music.bar join t_user_extra on t_user.foo = t_user_extra.baz",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "t_user_foo": 1
                },
                "TableName": "t_user_t_music_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Projection",
                    "Expressions": [
                      "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)",
                      "[COLUMN 2] as foo"
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "LeftJoin",
                        "JoinColumnIndexes": "L:0,R:0,L:1",
                        "JoinVars": {
                          "t_user_foo": 1
                        },
                        "TableName": "t_user_t_music",
                        "Inputs": [
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), t_user_0.foo from t_user_0 where 1 != 1 group by t_user_0.foo",
                            "Query": "select count(*), t_user.foo from t_user group by t_user.foo",
                            "Table": "t_user"
                          },
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                            "Query": "select count(*) from t_music where t_music.bar = :t_user_foo group by .0",
                            "Table": "t_music"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_user_extra where t_user_extra.baz = :t_user_foo group by .0",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "ordering have less column than grouping columns, grouping gets rearranged as order by and missing columns gets added to ordering",
    "query": "select u.col, u.intcol, count(*) from t_user u join t_music group by 1,2 order by 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.col, u.intcol, count(*) from t_user u join t_music group by 1,2 order by 2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "1, 0",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 3] as col",
              "[COLUMN 2] as intcol",
              "[COLUMN 0] * [COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,L:1,L:2",
                "TableName": "t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), u.intcol, u.col from t_user_0 as u where 1 != 1 group by u.intcol, u.col",
                    "OrderBy": "1 ASC, 2 ASC",
                    "Query": "select count(*), u.intcol, u.col from t_user as u group by u.intcol, u.col order by u.intcol asc, u.col asc",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_music_0 where 1 != 1 group by .0",
                    "Query": "select count(*) from t_music group by .0",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "multiple count star and a count with 3 table join",
    "query": "select count(*), count(*), count(u.col) from t_user u, t_user u2, t_user_extra ue",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*), count(*), count(u.col) from t_user u, t_user u2, t_user_extra ue",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*), sum_count_star(1) AS count(*), sum_count(2) AS count(u.col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(*)",
              "[COLUMN 0] * [COLUMN 1] as count(*)",
              "[COLUMN 0] * [COLUMN 2] as count(u.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,R:1",
                "TableName": "t_user_extra_t_user_t_user",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from t_user_extra_0 as ue where 1 != 1",
                    "Query": "select count(*) from t_user_extra as ue",
                    "Table": "t_user_extra"
                  },
                  {
                    "OperatorType": "Projection",
                    "Expressions": [
                      "[COLUMN 0] * [COLUMN 1] as count(*)",
                      "[COLUMN 2] * [COLUMN 1] as count(u.col)"
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "L:0,R:0,L:1",
                        "TableName": "t_user_t_user",
                        "Inputs": [
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), count(u.col) from t_user_0 as u where 1 != 1 group by .0",
                            "Query": "select count(*), count(u.col) from t_user as u group by .0",
                            "Table": "t_user"
                          },
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*) from t_user_0 as u2 where 1 != 1 group by .0",
                            "Query": "select count(*) from t_user as u2 group by .0",
                            "Table": "t_user"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "interleaving grouping, aggregation and join with min, max columns",
    "query": "select t_user.col, min(t_user_extra.foo), t_user.bar, max(t_user_extra.bar) from t_user join t_user_extra on t_user.col = t_user_extra.bar group by t_user.col, t_user.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t_user.col, min(t_user_extra.foo), t_user.bar, max(t_user_extra.bar) from t_user join t_user_extra on t_user.col = t_user_extra.bar group by t_user.col, t_user.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1|5) AS min(t_user_extra.foo), max(3|6) AS max(t_user_extra.bar)",
        "GroupBy": "0, (2|4)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,R:0,L:1,R:1,L:2,R:2,R:3",
            "JoinVars": {
              "t_user_col": 0
            },
            "TableName": "t_user_t_user_extra",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t_user_0.col, t_user_0.bar, weight_string(t_user_0.bar) from t_user_0 where 1 != 1 group by t_user_0.col, t_user_0.bar, weight_string(t_user_0.bar)",
                "OrderBy": "0 ASC, (1|2) ASC",
                "Query": "select t_user.col, t_user.bar, weight_string(t_user.bar) from t_user group by t_user.col, t_user.bar, weight_string(t_user.bar) order by t_user.col asc, t_user.bar asc",
                "Table": "t_user"
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select min(t_user_extra_0.foo), max(t_user_extra_0.bar), weight_string(t_user_extra_0.foo), weight_string(t_user_extra_0.bar) from t_user_extra_0 where 1 != 1 group by .0, weight_string(t_user_extra_0.foo), weight_string(t_user_extra_0.bar)",
                "Query": "select min(t_user_extra.foo), max(t_user_extra.bar), weight_string(t_user_extra.foo), weight_string(t_user_extra.bar) from t_user_extra where t_user_extra.bar = :t_user_col group by .0, weight_string(t_user_extra.foo), weight_string(t_user_extra.bar)",
                "Table": "t_user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "count with distinct no unique vindex",
    "query": "select col1, count(distinct col2) from t_user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2) from t_user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|3) AS count(distinct col2)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from t_user_0 where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from t_user group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "count with distinct no unique vindex and no group by",
    "query": "select count(distinct col2) from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct col2) from t_user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_distinct(0|1) AS count(distinct col2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col2, weight_string(col2) from t_user_0 where 1 != 1 group by col2, weight_string(col2)",
            "OrderBy": "(0|1) ASC",
            "Query": "select col2, weight_string(col2) from t_user group by col2, weight_string(col2) order by col2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "count with distinct no unique vindex, count expression aliased",
    "query": "select col1, count(distinct col2) c2 from t_user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2) c2 from t_user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|3) AS c2",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from t_user_0 where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from t_user group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "sum with distinct no unique vindex",
    "query": "select col1, sum(distinct col2) from t_user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, sum(distinct col2) from t_user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_distinct(1|3) AS sum(distinct col2)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from t_user_0 where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from t_user group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "min with distinct no unique vindex. distinct is ignored.",
    "query": "select col1, min(distinct col2) from t_user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, min(distinct col2) from t_user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1|3) AS min(distinct col2)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, min(col2) as `min(distinct col2)`, weight_string(col1), weight_string(col2) from t_user_0 where 1 != 1 group by col1, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC",
            "Query": "select col1, min(col2) as `min(distinct col2)`, weight_string(col1), weight_string(col2) from t_user group by col1, weight_string(col1), weight_string(col2) order by col1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "order by count distinct",
    "query": "select col1, count(distinct col2) k from t_user group by col1 order by k",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2) k from t_user group by col1 order by k",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "count_distinct(1|3) AS k",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from t_user_0 where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
                "OrderBy": "(0|2) ASC, (1|3) ASC",
                "Query": "select col1, col2, weight_string(col1), weight_string(col2) from t_user group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "distinct and aggregate functions missing group by",
    "query": "select distinct a, count(*) from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a, count(*) from t_user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "any_value(0) AS a, sum_count_star(1) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, count(*) from t_user_0 where 1 != 1",
            "Query": "select a, count(*) from t_user",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "distinct and aggregate functions",
    "query": "select distinct a, count(*) from t_user group by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a, count(*) from t_user group by a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, count(*), weight_string(a) from t_user_0 where 1 != 1 group by a, weight_string(a)",
            "OrderBy": "(0|2) ASC",
            "Query": "select a, count(*), weight_string(a) from t_user group by a, weight_string(a) order by a asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "do not use distinct when using only aggregates and no group by",
    "query": "select distinct count(*) from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct count(*) from t_user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from t_user_0 where 1 != 1",
            "Query": "select count(*) from t_user",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "multiple distinct functions with grouping.",
    "query": "select col1, count(distinct col2), sum(distinct col2) from t_user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2), sum(distinct col2) from t_user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|4) AS count(distinct col2), sum_distinct(2|4) AS sum(distinct col2)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, col2, weight_string(col1), weight_string(col2) from t_user_0 where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select col1, col2, col2, weight_string(col1), weight_string(col2) from t_user group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "distinct on text column with collation",
    "query": "select col, count(distinct textcol1) from t_user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(distinct textcol1) from t_user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1 COLLATE latin1_swedish_ci) AS count(distinct textcol1)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, textcol1 from t_user_0 where 1 != 1 group by col, textcol1",
            "OrderBy": "0 ASC, 1 ASC COLLATE latin1_swedish_ci",
            "Query": "select col, textcol1 from t_user group by col, textcol1 order by col asc, textcol1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "we have to track the order of distinct aggregation expressions",
    "query": "select val2, count(distinct val1), count(*) from t_user group by val2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select val2, count(distinct val1), count(*) from t_user group by val2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|4) AS count(distinct val1), sum_count_star(2) AS count(*)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select val2, val1, count(*), weight_string(val2), weight_string(val1) from t_user_0 where 1 != 1 group by val2, val1, weight_string(val2), weight_string(val1)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select val2, val1, count(*), weight_string(val2), weight_string(val1) from t_user group by val2, val1, weight_string(val2), weight_string(val1) order by val2 asc, val1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "multiple distinct aggregations on the same column is allowed",
    "query": "select tcol1, count(distinct tcol2), sum(distinct tcol2) from t_user group by tcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select tcol1, count(distinct tcol2), sum(distinct tcol2) from t_user group by tcol1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|4) AS count(distinct tcol2), sum_distinct(2|4) AS sum(distinct tcol2)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tcol1, tcol2, tcol2, weight_string(tcol1), weight_string(tcol2) from t_user_0 where 1 != 1 group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select tcol1, tcol2, tcol2, weight_string(tcol1), weight_string(tcol2) from t_user group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2) order by tcol1 asc, tcol2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "multiple distinct aggregations on the same column in different positions",
    "query": "select count(distinct tcol2), tcol1, count(*), sum(distinct tcol2) from t_user group by tcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct tcol2), tcol1, count(*), sum(distinct tcol2) from t_user group by tcol1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(0|4) AS count(distinct tcol2), sum_count_star(2) AS count(*), sum_distinct(3|4) AS sum(distinct tcol2)",
        "GroupBy": "(1|5)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tcol2, tcol1, count(*), tcol2, weight_string(tcol2), weight_string(tcol1) from t_user_0 where 1 != 1 group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2)",
            "OrderBy": "(1|5) ASC, (0|4) ASC",
            "Query": "select tcol2, tcol1, count(*), tcol2, weight_string(tcol2), weight_string(tcol1) from t_user group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2) order by tcol1 asc, tcol2 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "scalar aggregates with min, max, sum distinct and count distinct using collations",
    "query": "select min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from t_user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "min(0 COLLATE latin1_swedish_ci) AS min(textcol1), max(1 COLLATE latin1_swedish_ci) AS max(textcol2), sum_distinct(2 COLLATE latin1_swedish_ci) AS sum(distinct textcol1), count_distinct(3 COLLATE latin1_swedish_ci) AS count(distinct textcol1)",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select min(textcol1), max(textcol2), textcol1, textcol1 from t_user_0 where 1 != 1 group by textcol1",
            "OrderBy": "2 ASC COLLATE latin1_swedish_ci",
            "Query": "select min(textcol1), max(textcol2), textcol1, textcol1 from t_user group by textcol1 order by textcol1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "grouping aggregates with mi, max, sum distinct and count distinct using collations",
    "query": "select col, min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from t_user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from t_user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1 COLLATE latin1_swedish_ci) AS min(textcol1), max(2 COLLATE latin1_swedish_ci) AS max(textcol2), sum_distinct(3 COLLATE latin1_swedish_ci) AS sum(distinct textcol1), count_distinct(4 COLLATE latin1_swedish_ci) AS count(distinct textcol1)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, min(textcol1), max(textcol2), textcol1, textcol1 from t_user_0 where 1 != 1 group by col, textcol1",
            "OrderBy": "0 ASC, 3 ASC COLLATE latin1_swedish_ci",
            "Query": "select col, min(textcol1), max(textcol2), textcol1, textcol1 from t_user group by col, textcol1 order by col asc, textcol1 asc",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Column and Literal equality filter on scatter aggregates",
    "query": "select count(*) a from t_user having a = 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a = 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Equality filtering with column and string literal on scatter aggregates",
    "query": "select count(*) a from t_user having a = '1'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a = '1'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = '1'",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Column and Literal not equal filter on scatter aggregates",
    "query": "select count(*) a from t_user having a != 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a != 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) != 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Not equal filter with column and string literal on scatter aggregates",
    "query": "select count(*) a from t_user having a != '1'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a != '1'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) != '1'",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Greater than filter on scatter aggregates",
    "query": "select count(*) a from t_user having a > 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a > 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) > 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Less than filter on scatter aggregates",
    "query": "select count(*) a from t_user having a < 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a < 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) < 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Less Equal filter on scatter aggregates",
    "query": "select count(*) a from t_user having a <= 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from t_user having a <= 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) <= 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
                "Query": "select count(*) as a from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "Less Equal filter on scatter with grouping",
    "query": "select col, count(*) a from t_user group by col having a <= 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) a from t_user group by col having a <= 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) <= 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS a",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*) as a from t_user_0 where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*) as a from t_user group by col order by col asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "We should be able to find grouping keys on ordered aggregates",
    "query": "select count(*) as a, val1 from t_user group by val1 having a = 1.00",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) as a, val1 from t_user group by val1 having a = 1.00",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 1.00",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(0) AS a",
            "GroupBy": "(1|2)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a, val1, weight_string(val1) from t_user_0 where 1 != 1 group by val1, weight_string(val1)",
                "OrderBy": "(1|2) ASC",
                "Query": "select count(*) as a, val1, weight_string(val1) from t_user group by val1, weight_string(val1) order by val1 asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "aggregation filtering by having on a route with no group by with non-unique vindex filter",
    "query": "select 1 from t_user having count(id) = 10 and name = 'a'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from t_user having count(id) = 10 and name = 'a'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(id) = 10",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS 1, sum_count(1) AS count(id)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "ByDestination-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(id) from t_user_0 where 1 != 1",
                "Query": "select 1, count(id) from t_user where `name` = 'a'",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "aggregation filtering by having on a route with no group by",
    "query": "select 1 from t_user having count(id) = 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from t_user having count(id) = 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(id) = 10",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS 1, sum_count(1) AS count(id)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(id) from t_user_0 where 1 != 1",
                "Query": "select 1, count(id) from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "find aggregation expression and use column offset in filter",
    "query": "select foo, count(*) from t_user group by foo having count(*) = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, count(*) from t_user group by foo having count(*) = 3",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 3",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(*), weight_string(foo) from t_user_0 where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(*), weight_string(foo) from t_user group by foo, weight_string(foo) order by foo asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "find aggregation expression and use column offset in filter times two",
    "query": "select foo, sum(foo), sum(bar) from t_user group by foo having sum(foo)+sum(bar) = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, sum(foo), sum(bar) from t_user group by foo having sum(foo)+sum(bar) = 42",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "sum(foo) + sum(bar) = 42",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS sum(foo), sum(2) AS sum(bar)",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, sum(foo), sum(bar), weight_string(foo) from t_user_0 where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|3) ASC",
                "Query": "select foo, sum(foo), sum(bar), weight_string(foo) from t_user group by foo, weight_string(foo) order by foo asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "find aggregation expression and use column offset in filter times three",
    "query": "select foo, sum(foo) as fooSum, sum(bar) as barSum from t_user group by foo having fooSum+sum(bar) = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, sum(foo) as fooSum, sum(bar) as barSum from t_user group by foo having fooSum+sum(bar) = 42",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "sum(foo) + sum(bar) = 42",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS fooSum, sum(2) AS barSum",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, sum(foo) as fooSum, sum(bar) as barSum, weight_string(foo) from t_user_0 where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|3) ASC",
                "Query": "select foo, sum(foo) as fooSum, sum(bar) as barSum, weight_string(foo) from t_user group by foo, weight_string(foo) order by foo asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "having should be able to add new aggregation expressions in having",
    "query": "select foo from t_user group by foo having count(*) = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo from t_user group by foo having count(*) = 3",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 3",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(*), weight_string(foo) from t_user_0 where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(*), weight_string(foo) from t_user group by foo, weight_string(foo) order by foo asc",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "select (select 1 from user u having count(ue.col) > 10) from user_extra ue",
    "query": "select (select 1 from t_user u having count(ue.col) > 10) from t_user_extra ue",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select (select 1 from t_user u having count(ue.col) > 10) from t_user_extra ue",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              0
            ],
            "Inputs": [
              {
                "OperatorType": "Filter",
                "Predicate": ":1 > 10",
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Scalar",
                    "Aggregates": "any_value(0) AS 1, sum_count(1) AS count(ue.col)",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select 1, count(ue.col) from t_user_0 as u where 1 != 1",
                        "Query": "select 1, count(ue.col) from t_user as u",
                        "Table": "t_user"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select :__sq1 from t_user_extra_0 as ue where 1 != 1",
            "Query": "select :__sq1 from t_user_extra as ue",
            "Table": "t_user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Can't inline derived table when it has HAVING with aggregation function",
    "query": "select * from (select id from t_user having count(*) = 1) s",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select id from t_user having count(*) = 1) s",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS id, sum_count_star(1) AS count(*)",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, count(*) from t_user_0 where 1 != 1",
                "Query": "select id, count(*) from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "order by inside derived tables can be ignored",
    "query": "select col from (select t_user.col, t_user_extra.extra from t_user join t_user_extra on t_user.id = t_user_extra.user_id order by t_user_extra.extra) a",
    "plan": "VT12001: unsupported: unable to use: *sqlparser.DerivedTable in split table"
  },
  {
    "comment": "when pushing predicates into derived tables, make sure to put them in HAVING when they contain aggregations",
    "query": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as count from t_user_extra where localDate > :v1 group by user_id, flowId order by null) as t1 where count >= :v2",
    "plan": "VT12001: unsupported: unable to use: *sqlparser.DerivedTable in split table"
  },
  {
    "comment": "Cannot have more than one aggr(distinct...",
    "query": "select count(distinct a), count(distinct b) from t_user",
    "plan": "VT12001: unsupported: only one DISTINCT aggregation is allowed in a SELECT: count(distinct b)"
  },
  {
    "comment": "using two distinct columns - min with distinct vindex, sum with distinct without vindex",
    "query": "select col1, min(distinct id), sum(distinct col3) from t_user group by col1",
    "plan": "VT12001: unsupported: statement(min(distinct id)) in split table"
  },
  {
    "comment": "select count(distinct user_id, name) from user",
    "query": "select count(distinct user_id, name) from t_user",
    "plan": "VT03001: aggregate functions take a single argument 'count(distinct user_id, `name`)'"
  },
  {
    "comment": "group by a unique vindex should revert to simple route, and having clause should find the correct symbols.",
    "query": "select id, count(*) c from t_user group by id having max(col) > 10",
    "plan": "VT12001: unsupported: statement( having max(col) > 10) in split table"
  },
  {
    "comment": "aggregation filtering by having on a route",
    "query": "select id from t_user group by id having count(id) = 10",
    "plan": "VT12001: unsupported: statement( having count(id) = 10) in split table"
  },
  {
    "comment": "count with distinct group by unique vindex",
    "query": "select id, count(distinct col) from t_user group by id",
    "plan": "VT12001: unsupported: statement(count(distinct col)) in split table"
  },
  {
    "comment": "count with distinct unique vindex",
    "query": "select col, count(distinct id) from t_user group by col",
    "plan": "VT12001: unsupported: statement(count(distinct id)) in split table"
  },
  {
    "comment": "scatter aggregate using distinct",
    "query": "select distinct col from t_user where id=123 group by col",
    "plan": "VT12001: unsupported: distinct in split table"
  },
  {
    "comment": "scatter aggregate using distinct",
    "query": "select distinct col from t_user where id=123 group by name",
    "plan": "VT12001: unsupported: distinct in split table"
  },
  {
    "comment": "special shard using distinct-count",
    "query": "select distinct(count(col)) from t_user where id=123",
    "plan": "VT12001: unsupported: distinct in split table"
  },
  {
    "comment": "scatter aggregate in a subquery",
    "query": "select a from (select count(*) as a from t_user) t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a from (select count(*) as a from t_user) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from t_user_0 where 1 != 1",
            "Query": "select count(*) as a from t_user",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "order by inside and outside parenthesis select",
    "query": "(select id from t_user order by 1 desc) order by 1 asc limit 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from t_user order by 1 desc) order by 1 asc limit 2",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "INT64(2)",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from t_user_0 where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select id, weight_string(id) from t_user order by id asc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
    "query": "select sum(col) from (select t_user.col as col, 32 from t_user join t_user_extra) t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(col) from (select t_user.col as col, 32 from t_user join t_user_extra) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 2] * COALESCE([COLUMN 3], INT64(1)) as sum(col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,L:2,R:1",
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select t_user_0.col as col, 32, sum(col) from t_user_0 where 1 != 1",
                    "Query": "select t_user.col as col, 32, sum(col) from t_user",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1, count(*) from t_user_extra_0 where 1 != 1 group by 1",
                    "Query": "select 1, count(*) from t_user_extra group by 1",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "count on column from LIMIT",
    "query": "select count(city) from (select phone, id, city from t_user where id > 12 limit 10) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(city) from (select phone, id, city from t_user where id > 12 limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(city)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 2] as count(city)"
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(10)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select phone, id, city from t_user_0 where 1 != 1",
                    "Query": "select phone, id, city from t_user where id > 12 limit :__upper_limit",
                    "Table": "t_user"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "count non-null columns incoming from outer joins should work well",
    "query": "select count(col) from (select t_user_extra.col as col from t_user left join t_user_extra on t_user.id = t_user_extra.id limit 10) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(col) from (select t_user_extra.col as col from t_user left join t_user_extra on t_user.id = t_user_extra.id limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(col)",
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "INT64(10)",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "R:0",
                "JoinVars": {
                  "t_user_id": 0
                },
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select t_user_0.id from t_user_0 where 1 != 1",
                    "Query": "select t_user.id from t_user",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select t_user_extra_0.col from t_user_extra_0 where 1 != 1",
                    "Query": "select t_user_extra.col from t_user_extra where t_user_extra.id = :t_user_id",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "Aggregations from derived table used in arithmetic outside derived table",
    "query": "select A.a, A.b, (A.a / A.b) as d from (select sum(a) as a, sum(b) as b from t_user) A",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select A.a, A.b, (A.a / A.b) as d from (select sum(a) as a, sum(b) as b from t_user) A",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as a",
          "[COLUMN 1] as b",
          "[COLUMN 0] / [COLUMN 1] as d"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS a, sum(1) AS b",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(a) as a, sum(b) as b from t_user_0 where 1 != 1",
                "Query": "select sum(a) as a, sum(b) as b from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  }
]