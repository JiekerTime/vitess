[
  {
    "comment": "scatter aggregate in a subquery",
    "query": "select a from (select count(*) as a from user) t",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "select a from (select count(*) as a from user) t",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count(0) AS count",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select a from (select count(*) as a from user) t",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules for aggregates",
    "query": "select id, count(*) from route2 group by id",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) from route2 group by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id, count(*) from unsharded as route2 where 1 != 1 group by id",
        "Query": "select id, count(*) from unsharded as route2 group by id",
        "Table": "unsharded"
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) from route2 group by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id, count(*) from unsharded as route2 where 1 != 1 group by id",
        "Query": "select id, count(*) from unsharded as route2 group by id",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "order by on a reference table",
    "query": "select col from ref order by col",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "select col from ref order by col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from ref where 1 != 1",
        "Query": "select col from ref order by col asc",
        "Table": "ref"
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select col from ref order by col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from ref where 1 != 1",
        "Query": "select col from ref order by col asc",
        "Table": "ref"
      },
      "TablesUsed": [
        "user.ref"
      ]
    }
  },
  {
    "comment": "here it is safe to remove the order by on the derived table since it will not influence the output of the count(*)",
    "query": "select count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1",
            "Query": "select count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id order by user_extra.extra asc) as a",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "order by inside derived tables can be ignored",
    "query": "select col from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "select col from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col, user_extra.extra, weight_string(user_extra.extra) from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
            "OrderBy": "(1|2) ASC",
            "Query": "select `user`.col, user_extra.extra, weight_string(user_extra.extra) from `user` join user_extra on `user`.id = user_extra.user_id order by user_extra.extra asc",
            "ResultColumns": 2,
            "Table": "`user`, user_extra"
          }
        ]
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select col from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1",
        "Query": "select col from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id order by user_extra.extra asc) as a",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "here we keep the order since the column is visible on the outside, and used by the orderedAggregate",
    "query": "select col, count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a group by col",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id order by user_extra.extra asc) as a group by col order by col asc",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "join query on sharding key with group by a unique vindex with having clause.",
    "query": "select user.id, count(*) c from user, user_extra where user.id = user_extra.user_id group by user.id having max(user.col) > 10",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select user.id, count(*) c from user, user_extra where user.id = user_extra.user_id group by user.id having max(user.col) > 10",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, count(*) as c from `user`, user_extra where 1 != 1 group by `user`.id",
        "Query": "select `user`.id, count(*) as c from `user`, user_extra where `user`.id = user_extra.user_id group by `user`.id having max(`user`.col) > 10",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery on sharding key with group by a unique vindex with having clause.",
    "query": "select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) > 10)",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) > 10)",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from `user` where 1 != 1",
            "Query": "select count(*) from `user` where exists (select 1 from user_extra where user_id = `user`.id group by user_id having max(col) > 10 limit 1)",
            "Table": "`user`"
          }
        ]
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) > 10)",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from `user` where 1 != 1",
            "Query": "select count(*) from `user` where exists (select 1 from user_extra where user_id = `user`.id group by user_id having max(col) > 10 limit 1)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "order by inside and outside parenthesis select",
    "query": "(select id from user order by 1 desc) order by 1 asc limit 2",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user order by 1 desc) order by 1 asc limit 2",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "INT64(2)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select id, weight_string(id) from `user` order by 1 asc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "`user`"
          }
        ]
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user order by 1 desc) order by 1 asc limit 2",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "INT64(2)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select id, weight_string(id) from `user` order by id asc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "correlated subquery in exists clause with an ordering",
    "query": "select col, id from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by id",
    "v3-plan": "VT12001: unsupported: cross-shard correlated subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select col, id from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by id",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "user_id": 0
        },
        "ProjectedIndexes": "-2,-1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, col, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(0|2) ASC",
            "Query": "select `user`.id, col, weight_string(id) from `user` order by id asc",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_id = 3 and user_id < :user_id",
            "Table": "user_extra",
            "Values": [
              "INT64(3)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregation spread out across three routes",
    "query": "select count(u.textcol1), count(ue.foo), us.bar from user u join user_extra ue on u.foo = ue.bar join unsharded us on ue.bar = us.baz group by us.bar",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(u.textcol1), count(ue.foo), us.bar from user u join user_extra ue on u.foo = ue.bar join unsharded us on ue.bar = us.baz group by us.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count(0) AS count(u.textcol1), sum_count(1) AS count(ue.foo)",
        "GroupBy": "(2|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * [COLUMN 1] as count(u.textcol1)",
              "[COLUMN 3] * [COLUMN 2] as count(ue.foo)",
              "[COLUMN 4] as bar",
              "[COLUMN 5] as weight_string(us.bar)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(4|5) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0,R:1,L:1,R:2,R:3",
                    "JoinVars": {
                      "u_foo": 2
                    },
                    "TableName": "`user`_user_extra_unsharded",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(u.textcol1), count(*), u.foo from `user` as u where 1 != 1 group by u.foo",
                        "Query": "select count(u.textcol1), count(*), u.foo from `user` as u group by u.foo",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Projection",
                        "Expressions": [
                          "[COLUMN 0] * [COLUMN 1] as count(*)",
                          "[COLUMN 2] * [COLUMN 1] as count(ue.foo)",
                          "[COLUMN 3] as bar",
                          "[COLUMN 4] as weight_string(us.bar)"
                        ],
                        "Inputs": [
                          {
                            "OperatorType": "Join",
                            "Variant": "Join",
                            "JoinColumnIndexes": "L:0,R:0,L:1,R:1,R:2",
                            "JoinVars": {
                              "ue_bar": 2
                            },
                            "TableName": "user_extra_unsharded",
                            "Inputs": [
                              {
                                "OperatorType": "Route",
                                "Variant": "Scatter",
                                "Keyspace": {
                                  "Name": "user",
                                  "Sharded": true
                                },
                                "FieldQuery": "select count(*), count(ue.foo), ue.bar from user_extra as ue where 1 != 1 group by ue.bar",
                                "Query": "select count(*), count(ue.foo), ue.bar from user_extra as ue where ue.bar = :u_foo group by ue.bar",
                                "Table": "user_extra"
                              },
                              {
                                "OperatorType": "Route",
                                "Variant": "Unsharded",
                                "Keyspace": {
                                  "Name": "main",
                                  "Sharded": false
                                },
                                "FieldQuery": "select count(*), us.bar, weight_string(us.bar) from unsharded as us where 1 != 1 group by us.bar, weight_string(us.bar)",
                                "Query": "select count(*), us.bar, weight_string(us.bar) from unsharded as us where us.baz = :ue_bar group by us.bar, weight_string(us.bar)",
                                "Table": "unsharded"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregation on top of semijoin",
    "query": "select count(*) from user where exists (select 0 from user_extra where user.apa = user_extra.bar)",
    "v3-plan": "VT12001: unsupported: cross-shard correlated subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user where exists (select 0 from user_extra where user.apa = user_extra.bar)",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 1] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "SemiJoin",
                "JoinVars": {
                  "user_apa": 0
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.apa, count(*), weight_string(`user`.apa) from `user` where 1 != 1 group by `user`.apa, weight_string(`user`.apa)",
                    "Query": "select `user`.apa, count(*), weight_string(`user`.apa) from `user` group by `user`.apa, weight_string(`user`.apa)",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from user_extra where 1 != 1",
                    "Query": "select 1 from user_extra where user_extra.bar = :user_apa",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "distinct aggregation will 3 table join query",
    "query": "select u.textcol1, count(distinct u.val2) from t_user u join t_user u2 on u.val2 = u2.id join t_music m on u2.val2 = m.id group by u.textcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.textcol1, count(distinct u.val2) from t_user u join t_user u2 on u.val2 = u2.id join t_music m on u2.val2 = m.id group by u.textcol1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|2) AS count(distinct u.val2)",
        "GroupBy": "0 COLLATE latin1_swedish_ci",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] as textcol1",
              "[COLUMN 1] as val2",
              "[COLUMN 2]"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:2,L:3,L:5",
                "JoinVars": {
                  "u2_val2": 0
                },
                "TableName": "t_user_t_user_t_music",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "R:0,R:0,L:2,L:0,R:1,L:1",
                    "JoinVars": {
                      "u_val2": 0
                    },
                    "TableName": "t_user_t_user",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select u.val2, weight_string(u.val2), u.textcol1 from t_user_0 as u where 1 != 1 group by u.val2, weight_string(u.val2), u.textcol1",
                        "OrderBy": "2 ASC COLLATE latin1_swedish_ci, (0|1) ASC",
                        "Query": "select u.val2, weight_string(u.val2), u.textcol1 from t_user as u group by u.val2, weight_string(u.val2), u.textcol1 order by u.textcol1 asc, u.val2 asc",
                        "Table": "t_user"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "EqualUnique",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select u2.val2, weight_string(u2.val2) from t_user_0 as u2 where 1 != 1 group by u2.val2, weight_string(u2.val2)",
                        "Query": "select u2.val2, weight_string(u2.val2) from t_user as u2 where u2.id = :u_val2 group by u2.val2, weight_string(u2.val2)",
                        "Table": "t_user",
                        "Values": [
                          ":u_val2"
                        ],
                        "Vindex": "user_index"
                      }
                    ]
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "EqualUnique-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from t_music_0 as m where 1 != 1",
                    "Query": "select 1 from t_music as m where m.id = :u2_val2",
                    "Table": "t_music",
                    "Values": [
                      ":u2_val2"
                    ],
                    "Vindex": "music_user_map"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "select count(distinct user_id, name) from unsharded",
    "query": "select count(distinct user_id, name) from unsharded",
    "v3-plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct user_id, name) from unsharded",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select count(distinct user_id, `name`) from unsharded where 1 != 1",
        "Query": "select count(distinct user_id, `name`) from unsharded",
        "Table": "unsharded"
      }
    },
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct user_id, name) from unsharded",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select count(distinct user_id, `name`) from unsharded where 1 != 1",
        "Query": "select count(distinct user_id, `name`) from unsharded",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
    "query": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 2] * COALESCE([COLUMN 3], INT64(1)) as sum(col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,L:2,R:1",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.col as col, 32, sum(col) from `user` where 1 != 1",
                    "Query": "select `user`.col as col, 32, sum(col) from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1, count(*) from user_extra where 1 != 1 group by 1",
                    "Query": "select 1, count(*) from user_extra group by 1",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "group by and ',' joins",
    "query": "select user.id from user, user_extra group by id",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select user.id from user, user_extra group by id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "(0|1)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, weight_string(id) from `user` where 1 != 1 group by id, weight_string(id)",
                "OrderBy": "(0|1) ASC",
                "Query": "select `user`.id, weight_string(id) from `user` group by id, weight_string(id) order by id asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1 group by .0",
                "Query": "select 1 from user_extra group by .0",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "count on column from LIMIT",
    "query": "select count(city) from (select phone, id, city from user where id > 12 limit 10) as x",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(city) from (select phone, id, city from user where id > 12 limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(city)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 2] as count(city)"
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(10)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select phone, id, city from `user` where 1 != 1",
                    "Query": "select phone, id, city from `user` where id > 12 limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count(*) on column from LIMIT",
    "query": "select count(*) from (select phone, id, city from user where id > 12 limit 10) as x",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from (select phone, id, city from user where id > 12 limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(10)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select phone, id, city from `user` where 1 != 1",
                    "Query": "select phone, id, city from `user` where id > 12 limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count non-null columns incoming from outer joins should work well",
    "query": "select count(col) from (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(col) from (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] as count(col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(10)",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "LeftJoin",
                    "JoinColumnIndexes": "R:0",
                    "JoinVars": {
                      "user_id": 0
                    },
                    "TableName": "`user`_user_extra",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select `user`.id from `user` where 1 != 1",
                        "Query": "select `user`.id from `user`",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select user_extra.col as col from user_extra where 1 != 1",
                        "Query": "select user_extra.col as col from user_extra where user_extra.id = :user_id",
                        "Table": "user_extra"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "grouping on data from derived table",
    "query": "select val1, count(*)  from (select id, val1 from user where val2 < 4 order by val1 limit 2) as x group by val1",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select val1, count(*)  from (select id, val1 from user where val2 < 4 order by val1 limit 2) as x group by val1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 1] as val1",
              "[COLUMN 0] as count(*)",
              "[COLUMN 2]"
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(2)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, val1, weight_string(val1) from `user` where 1 != 1",
                    "OrderBy": "(1|2) ASC, (1|2) ASC",
                    "Query": "select id, val1, weight_string(val1) from `user` where val2 < 4 order by val1 asc, val1 asc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "AggregateRandom in non full group by query",
    "query": "select u.id, u.name, count(m.predef1) from user.user as u join user.user_extra as m on u.id = m.order group by u.id",
    "v3-plan": "VT12001: unsupported: cross-shard query with aggregates",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select u.id, u.name, count(m.predef1) from user.user as u join user.user_extra as m on u.id = m.order group by u.id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "random(1) AS name, sum_count(2) AS count(m.predef1)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 3] as id",
              "[COLUMN 0] as name",
              "[COLUMN 1] * [COLUMN 2] as count(m.predef1)",
              "[COLUMN 4] as weight_string(u.id)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(3|4) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "R:0,L:0,R:1,R:2,R:3",
                    "JoinVars": {
                      "m_order": 1
                    },
                    "TableName": "user_extra_`user`",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(m.predef1), m.`order` from user_extra as m where 1 != 1 group by m.`order`",
                        "Query": "select count(m.predef1), m.`order` from user_extra as m group by m.`order`",
                        "Table": "user_extra"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "EqualUnique",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select u.`name`, count(*), u.id, weight_string(u.id) from `user` as u where 1 != 1 group by u.id, weight_string(u.id)",
                        "Query": "select u.`name`, count(*), u.id, weight_string(u.id) from `user` as u where u.id = :m_order group by u.id, weight_string(u.id)",
                        "Table": "`user`",
                        "Values": [
                          ":m_order"
                        ],
                        "Vindex": "user_index"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Aggregations from derived table used in arithmetic outside derived table",
    "query": "select A.a, A.b, (A.a / A.b) as d from (select sum(a) as a, sum(b) as b from user) A",
    "v3-plan": "VT12001: unsupported: expression on results of a cross-shard subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "select A.a, A.b, (A.a / A.b) as d from (select sum(a) as a, sum(b) as b from user) A",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as a",
          "[COLUMN 1] as b",
          "[COLUMN 0] / [COLUMN 1] as d"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS a, sum(1) AS b",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(a) as a, sum(b) as b from `user` where 1 != 1",
                "Query": "select sum(a) as a, sum(b) as b from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation, where and derived tables - we can push extremums",
    "query": "SELECT foo FROM (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
    "v3-plan": "VT12001: unsupported: filtering on results of cross-shard subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "SELECT foo FROM (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "max(1) AS bazo",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, max(baz) as bazo, weight_string(foo) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, max(baz) as bazo, weight_string(foo) from (select foo, baz from `user` having max(baz) between 100 and 200) as f group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation, where and derived tables - we can't push aggregations that might need a second layer of aggregation",
    "query": "SELECT foo FROM (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
    "v3-plan": "VT12001: unsupported: filtering on results of cross-shard subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "SELECT foo FROM (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          1
        ],
        "Inputs": [
          {
            "OperatorType": "Filter",
            "Predicate": "bazo between 100 and 200",
            "Inputs": [
              {
                "OperatorType": "SimpleProjection",
                "Columns": [
                  1,
                  0
                ],
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Ordered",
                    "Aggregates": "sum_count(1) AS bazo",
                    "GroupBy": "(0|2)",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo)",
                        "OrderBy": "(0|2) ASC",
                        "Query": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user`) as f group by foo, weight_string(foo) order by foo asc",
                        "Table": "`user`"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  }
]
