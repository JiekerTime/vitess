[
  {
    "comment": "aggregation, where and derived tables - we can push extremums",
    "query": "SELECT foo FROM (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
    "v3-plan": "VT12001: unsupported: filtering on results of cross-shard subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "SELECT foo FROM (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "max(1) AS bazo",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, max(baz) as bazo, weight_string(foo) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, max(baz) as bazo, weight_string(foo) from (select foo, baz from `user` having max(baz) between 100 and 200) as f group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation, where and derived tables - we can't push aggregations that might need a second layer of aggregation",
    "query": "SELECT foo FROM (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
    "v3-plan": "VT12001: unsupported: filtering on results of cross-shard subquery",
    "gen4-plan": {
      "QueryType": "SELECT",
      "Original": "SELECT foo FROM (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          1
        ],
        "Inputs": [
          {
            "OperatorType": "Filter",
            "Predicate": "bazo between 100 and 200",
            "Inputs": [
              {
                "OperatorType": "SimpleProjection",
                "Columns": [
                  1,
                  0
                ],
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Ordered",
                    "Aggregates": "sum_count(1) AS bazo",
                    "GroupBy": "(0|2)",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo)",
                        "OrderBy": "(0|2) ASC",
                        "Query": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user`) as f group by foo, weight_string(foo) order by foo asc",
                        "Table": "`user`"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select (select 1 from user u having count(ue.col) > 10) from user_extra ue",
    "query": "select (select 1 from t_user u having count(ue.col) > 10) from t_user_extra ue",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select (select 1 from t_user u having count(ue.col) > 10) from t_user_extra ue",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              0
            ],
            "Inputs": [
              {
                "OperatorType": "Filter",
                "Predicate": ":1 > 10",
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Scalar",
                    "Aggregates": "any_value(0) AS 1, sum_count(1) AS count(ue.col)",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select 1, count(ue.col) from t_user_0 as u where 1 != 1",
                        "Query": "select 1, count(ue.col) from t_user as u",
                        "Table": "t_user"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select :__sq1 from t_user_extra_0 as ue where 1 != 1",
            "Query": "select :__sq1 from t_user_extra as ue",
            "Table": "t_user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  }
]