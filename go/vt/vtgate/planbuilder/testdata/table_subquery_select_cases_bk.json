[
  {
    "comment": "sub-expression subquery in select",
    "query": "select a, 1+(select col from user) from unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, 1+(select col from user) from unsharded",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select a, 1 + :__sq1 from unsharded where 1 != 1",
            "Query": "select a, 1 + :__sq1 from unsharded",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "unsharded union in subquery",
    "query": "select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id, `name` from unsharded where 1 != 1",
        "Query": "select id, `name` from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "correlated subquery in exists clause",
    "query": "select col from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id)",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "user_id": 0
        },
        "ProjectedIndexes": "-2",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, col from `user` where 1 != 1",
            "Query": "select `user`.id, col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_id = 3 and user_id < :user_id",
            "Table": "user_extra",
            "Values": [
              "INT64(3)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery in exists clause with an order by",
    "query": "select col from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by col",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "user_id": 0
        },
        "ProjectedIndexes": "-2",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, col from `user` where 1 != 1",
            "OrderBy": "1 ASC",
            "Query": "select `user`.id, col from `user` order by col asc",
            "Table": "`user`"
          },
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_id = 3 and user_id < :user_id",
            "Table": "user_extra",
            "Values": [
              "INT64(3)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery having dependencies on two tables",
    "query": "select 1 from user u1, user u2 where exists (select 1 from user_extra ue where ue.col = u1.col and ue.col = u2.col)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user u1, user u2 where exists (select 1 from user_extra ue where ue.col = u1.col and ue.col = u2.col)",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "u1_col": 0,
          "u2_col": 1
        },
        "ProjectedIndexes": "-3",
        "TableName": "`user`_`user`_user_extra",
        "Inputs": [
          {
            "InputName": "Outer",
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,R:0,L:1",
            "TableName": "`user`_`user`",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u1.col, 1 from `user` as u1 where 1 != 1",
                "Query": "select u1.col, 1 from `user` as u1",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u2.col from `user` as u2 where 1 != 1",
                "Query": "select u2.col from `user` as u2",
                "Table": "`user`"
              }
            ]
          },
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra as ue where 1 != 1",
            "Query": "select 1 from user_extra as ue where ue.col = :u1_col /* INT16 */ and ue.col = :u2_col /* INT16 */",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery using a column twice",
    "query": "select 1 from user u where exists (select 1 from user_extra ue where ue.col = u.col and u.col = ue.col2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user u where exists (select 1 from user_extra ue where ue.col = u.col and u.col = ue.col2)",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "u_col": 0
        },
        "ProjectedIndexes": "-2",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.col, 1 from `user` as u where 1 != 1",
            "Query": "select u.col, 1 from `user` as u",
            "Table": "`user`"
          },
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra as ue where 1 != 1",
            "Query": "select 1 from user_extra as ue where ue.col = :u_col /* INT16 */ and ue.col2 = :u_col",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery that is dependent on one side of a join, fully mergeable",
    "query": "SELECT music.id FROM music INNER JOIN user ON music.user_id = user.id WHERE music.user_id = 5 AND music.id = (SELECT MAX(m2.id) FROM music m2 WHERE m2.user_id = user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music INNER JOIN user ON music.user_id = user.id WHERE music.user_id = 5 AND music.id = (SELECT MAX(m2.id) FROM music m2 WHERE m2.user_id = user.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music, `user` where 1 != 1",
        "Query": "select music.id from music, `user` where music.user_id = 5 and music.id = (select max(m2.id) from music as m2 where m2.user_id = `user`.id) and music.user_id = `user`.id",
        "Table": "`user`, music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Reference with a subquery which can be merged",
    "query": "select exists(select id from user where id = 4)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select exists(select id from user where id = 4)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select exists (select 1 from `user` where 1 != 1) from dual where 1 != 1",
        "Query": "select exists (select 1 from `user` where id = 4 limit 1) from dual",
        "Table": "dual",
        "Values": [
          "INT64(4)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "main.dual",
        "user.user"
      ]
    }
  },
  {
    "comment": "Mergeable subquery with `MAX` aggregate and grouped by unique vindex",
    "query": "SELECT music.id FROM music WHERE music.id IN (SELECT MAX(music.id) FROM music WHERE music.user_id IN (5, 6) GROUP BY music.user_id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music WHERE music.id IN (SELECT MAX(music.id) FROM music WHERE music.user_id IN (5, 6) GROUP BY music.user_id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music where 1 != 1",
        "Query": "select music.id from music where music.id in (select max(music.id) from music where music.user_id in ::__vals group by music.user_id)",
        "Table": "music",
        "Values": [
          "(INT64(5), INT64(6))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Joining with a subquery that uses an aggregate column and an `EqualUnique` route can be merged together",
    "query": "SELECT music.id FROM music INNER JOIN (SELECT MAX(id) as maxt FROM music WHERE music.user_id = 5) other ON other.maxt = music.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music INNER JOIN (SELECT MAX(id) as maxt FROM music WHERE music.user_id = 5) other ON other.maxt = music.id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from (select max(id) as maxt from music where 1 != 1) as other, music where 1 != 1",
        "Query": "select music.id from (select max(id) as maxt from music where music.user_id = 5) as other, music where other.maxt = music.id",
        "Table": "music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Joining with a subquery that uses an `EqualUnique` route can be merged",
    "query": "SELECT music.id FROM music INNER JOIN (SELECT id FROM music WHERE music.user_id = 5) other ON other.id = music.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music INNER JOIN (SELECT id FROM music WHERE music.user_id = 5) other ON other.id = music.id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from (select id from music where 1 != 1) as other, music where 1 != 1",
        "Query": "select music.id from (select id from music where music.user_id = 5) as other, music where other.id = music.id",
        "Table": "music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Joining with a subquery that has an `IN` route can be merged",
    "query": "SELECT music.id FROM music INNER JOIN (SELECT id FROM music WHERE music.user_id IN (5, 6, 7)) other ON other.id = music.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music INNER JOIN (SELECT id FROM music WHERE music.user_id IN (5, 6, 7)) other ON other.id = music.id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from (select id from music where 1 != 1) as other, music where 1 != 1",
        "Query": "select music.id from (select id from music where music.user_id in ::__vals) as other, music where other.id = music.id",
        "Table": "music",
        "Values": [
          "(INT64(5), INT64(6), INT64(7))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "merge subquery using MAX and join into single route",
    "query": "select 1 from user join music_extra on user.id = music_extra.user_id where music_extra.music_id = (select max(music_id) from music_extra where user_id = user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user join music_extra on user.id = music_extra.user_id where music_extra.music_id = (select max(music_id) from music_extra where user_id = user.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user`, music_extra where 1 != 1",
        "Query": "select 1 from `user`, music_extra where music_extra.music_id = (select max(music_id) from music_extra where user_id = `user`.id) and `user`.id = music_extra.user_id",
        "Table": "`user`, music_extra"
      },
      "TablesUsed": [
        "user.music_extra",
        "user.user"
      ]
    }
  },
  {
    "comment": "top level subquery in select",
    "query": "select a, (select col from user) from unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, (select col from user) from unsharded",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select a, :__sq1 from unsharded where 1 != 1",
            "Query": "select a, :__sq1 from unsharded",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "subquery exists",
    "query": "select exists(select id from t_user where id = 4)",
    "plan": "VT12001: unsupported: subquery in split table"
  }
]