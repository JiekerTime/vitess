[
  {
    "comment": "union all between two SelectEqualUnique",
    "query": "select id from t_user where id = 1 union all select id from t_user where id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user where id = 1 union all select id from t_user where id = 5",
      "Instructions": {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 1",
            "Table": "t_user",
            "Values": [
              "INT64(1)"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 5",
            "Table": "t_user",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "union all between two SelectEqualUnique",
    "query": "select id from t_user where id = 1 and col = '1' union all select id from t_user where id = 5 and col = '5'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user where id = 1 and col = '1' union all select id from t_user where id = 5 and col = '5'",
      "Instructions": {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 1 and col = '1'",
            "Table": "t_user",
            "TableValues": [
              "VARCHAR(\"1\")"
            ],
            "Values": [
              "INT64(1)"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 5 and col = '5'",
            "Table": "t_user",
            "TableValues": [
              "VARCHAR(\"5\")"
            ],
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "almost dereks query - two queries with order by and limit being scattered to two different sets of tablets",
    "query": "(SELECT id FROM t_user ORDER BY id DESC LIMIT 1) UNION ALL (SELECT id FROM t_music ORDER BY id DESC LIMIT 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(SELECT id FROM t_user ORDER BY id DESC LIMIT 1) UNION ALL (SELECT id FROM t_music ORDER BY id DESC LIMIT 1)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(1)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from t_user_0 where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "ResultColumns": 1,
                    "Query": "select id, weight_string(id) from t_user order by id desc limit :__upper_limit",
                    "Table": "t_user"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "INT64(1)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from t_music_0 where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "ResultColumns": 1,
                    "Query": "select id, weight_string(id) from t_music order by id desc limit :__upper_limit",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "almost dereks query - two queries with order by and limit being scattered to two different sets of tablets",
    "query": "(SELECT id FROM t_user ORDER BY col DESC LIMIT 1) UNION ALL (SELECT id FROM t_music ORDER BY a DESC LIMIT 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(SELECT id FROM t_user ORDER BY col DESC LIMIT 1) UNION ALL (SELECT id FROM t_music ORDER BY a DESC LIMIT 1)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(1)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, col from t_user_0 where 1 != 1",
                    "OrderBy": "1 DESC",
                    "ResultColumns": 1,
                    "Query": "select id, col from t_user order by col desc limit :__upper_limit",
                    "Table": "t_user"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "INT64(1)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, a, weight_string(a) from t_music_0 where 1 != 1",
                    "OrderBy": "(1|2) DESC",
                    "ResultColumns": 1,
                    "Query": "select id, a, weight_string(a) from t_music order by a desc limit :__upper_limit",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "union all between two scatter selects, with order by",
    "query": "(select id from t_user order by id limit 5) union all (select id from t_music order by id desc limit 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from t_user order by id limit 5) union all (select id from t_music order by id desc limit 5)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(5)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from t_user_0 where 1 != 1",
                    "OrderBy": "(0|1) ASC",
                    "ResultColumns": 1,
                    "Query": "select id, weight_string(id) from t_user order by id asc limit :__upper_limit",
                    "Table": "t_user"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "INT64(5)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from t_music_0 where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "ResultColumns": 1,
                    "Query": "select id, weight_string(id) from t_music order by id desc limit :__upper_limit",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "union all between two scatter selects, with order by",
    "query": "(select id from t_user order by col limit 5) union all (select id from t_music order by a desc limit 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from t_user order by col limit 5) union all (select id from t_music order by a desc limit 5)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(5)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, col from t_user_0 where 1 != 1",
                    "OrderBy": "1 ASC",
                    "ResultColumns": 1,
                    "Query": "select id, col from t_user order by col asc limit :__upper_limit",
                    "Table": "t_user"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "INT64(5)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, a, weight_string(a) from t_music_0 where 1 != 1",
                    "OrderBy": "(1|2) DESC",
                    "ResultColumns": 1,
                    "Query": "select id, a, weight_string(a) from t_music order by a desc limit :__upper_limit",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "unmergable because we are using aggregation",
    "query": "select count(*) as s from t_user union select count(*) as s from t_music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) as s from t_user union select count(*) as s from t_music",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Scalar",
                "Aggregates": "sum_count_star(0) AS s",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) as s from t_user_0 where 1 != 1",
                    "Query": "select count(*) as s from t_user",
                    "Table": "t_user"
                  }
                ]
              },
              {
                "OperatorType": "Aggregate",
                "Variant": "Scalar",
                "Aggregates": "sum_count_star(0) AS s",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) as s from t_music_0 where 1 != 1",
                    "Query": "select count(*) as s from t_music",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "derived table with union",
    "query": "select tbl2.id FROM ((select id from t_user order by id limit 5) union all (select id from t_user order by id desc limit 5)) as tbl1 INNER JOIN t_user as tbl2  ON tbl1.id = tbl2.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select tbl2.id FROM ((select id from t_user order by id limit 5) union all (select id from t_user order by id desc limit 5)) as tbl1 INNER JOIN t_user as tbl2  ON tbl1.id = tbl2.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "tbl1_id": 0
        },
        "TableName": "t_user_t_user",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              0
            ],
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Limit",
                    "Count": "INT64(5)",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select id, weight_string(id) from t_user_0 where 1 != 1",
                        "OrderBy": "(0|1) ASC",
                        "Query": "select id, weight_string(id) from t_user order by id asc limit :__upper_limit",
                        "Table": "t_user"
                      }
                    ]
                  },
                  {
                    "OperatorType": "Limit",
                    "Count": "INT64(5)",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select id, weight_string(id) from t_user_0 where 1 != 1",
                        "OrderBy": "(0|1) DESC",
                        "Query": "select id, weight_string(id) from t_user order by id desc limit :__upper_limit",
                        "Table": "t_user"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tbl2.id from t_user_0 as tbl2 where 1 != 1",
            "Query": "select tbl2.id from t_user as tbl2 where tbl2.id = :tbl1_id",
            "Table": "t_user",
            "Values": [
              ":tbl1_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "derived table with union",
    "query": "select tbl2.id FROM ((select id from t_user order by col limit 5) union all (select id from t_user order by col desc limit 5)) as tbl1 INNER JOIN t_user as tbl2  ON tbl1.id = tbl2.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select tbl2.id FROM ((select id from t_user order by col limit 5) union all (select id from t_user order by col desc limit 5)) as tbl1 INNER JOIN t_user as tbl2  ON tbl1.id = tbl2.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "tbl1_id": 0
        },
        "TableName": "t_user_t_user",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              0
            ],
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Limit",
                    "Count": "INT64(5)",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select id, col from t_user_0 where 1 != 1",
                        "OrderBy": "1 ASC",
                        "Query": "select id, col from t_user order by col asc limit :__upper_limit",
                        "Table": "t_user"
                      }
                    ]
                  },
                  {
                    "OperatorType": "Limit",
                    "Count": "INT64(5)",
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select id, col from t_user_0 where 1 != 1",
                        "OrderBy": "1 DESC",
                        "Query": "select id, col from t_user order by col desc limit :__upper_limit",
                        "Table": "t_user"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tbl2.id from t_user_0 as tbl2 where 1 != 1",
            "Query": "select tbl2.id from t_user as tbl2 where tbl2.id = :tbl1_id",
            "Table": "t_user",
            "Values": [
              ":tbl1_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "derived table with union and group by",
    "query": "(SELECT id FROM t_user group by id ORDER BY id DESC LIMIT 1 ) UNION ALL (SELECT id FROM t_music ORDER BY col DESC LIMIT 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(SELECT id FROM t_user group by id ORDER BY id DESC LIMIT 1 ) UNION ALL (SELECT id FROM t_music ORDER BY col DESC LIMIT 1)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "INT64(1)",
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Ordered",
                    "Aggregates": "any_value(1) AS weight_string(id)",
                    "GroupBy": "(0|1)",
                    "ResultColumns": 1,
                    "Inputs": [
                      {
                        "OperatorType": "TableRoute",
                        "Variant": "Scatter-Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select id, weight_string(id) from t_user_0 where 1 != 1 group by id",
                        "OrderBy": "(0|1) DESC",
                        "Query": "select id, weight_string(id) from t_user group by id order by id desc limit :__upper_limit",
                        "Table": "t_user"
                      }
                    ]
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "INT64(1)",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, col, weight_string(col) from t_music_0 where 1 != 1",
                    "OrderBy": "(1|2) DESC",
                    "ResultColumns": 1,
                    "Query": "select id, col, weight_string(col) from t_music order by col desc limit :__upper_limit",
                    "Table": "t_music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "union all between two scatter selects",
    "query": "select id from t_user union all select id from t_music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user union all select id from t_music",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from t_user_0 where 1 != 1 union all select id from t_music_0 where 1 != 1",
        "Query": "select id from t_user union all select id from t_music",
        "Table": "t_music, t_user"
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }

  },
  {
    "comment": "Union all",
    "query": "select col1, col2 from t_user union all select col1, col2 from t_user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, col2 from t_user union all select col1, col2 from t_user_extra",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from t_user_0 where 1 != 1 union all select col1, col2 from t_user_extra_0 where 1 != 1",
        "Query": "select col1, col2 from t_user union all select col1, col2 from t_user_extra",
        "Table": "t_user, t_user_extra"
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }

  },
  {
    "comment": "union with different target shards",
    "query": "select 1 from t_music where id = 1 union select 1 from t_music where id = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from t_music where id = 1 union select 1 from t_music where id = 2",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Distinct",
                "Collations": [
                  "0"
                ],
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "EqualUnique-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from t_music_0 where 1 != 1",
                    "Query": "select distinct 1 from t_music where id = 1",
                    "Table": "t_music",
                    "Values": [
                      "INT64(1)"
                    ],
                    "Vindex": "music_user_map"
                  }
                ]
              },
              {
                "OperatorType": "Distinct",
                "Collations": [
                  "0"
                ],
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "EqualUnique-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from t_music_0 where 1 != 1",
                    "Query": "select distinct 1 from t_music where id = 2",
                    "Table": "t_music",
                    "Values": [
                      "INT64(2)"
                    ],
                    "Vindex": "music_user_map"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_music"
      ]
    }
  },
  {
    "comment": "union distinct between a scatter query and a join (other side)",
    "query": "(select t_user.id, t_user.name from t_user join t_user_extra where t_user_extra.extra = 'asdf') union select 'b','c' from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select t_user.id, t_user.name from t_user join t_user_extra where t_user_extra.extra = 'asdf') union select 'b','c' from t_user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:3)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,L:2,L:3",
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select t_user_0.id, t_user_0.`name`, weight_string(t_user_0.id), weight_string(t_user_0.`name`) from t_user_0 where 1 != 1",
                    "Query": "select distinct t_user.id, t_user.`name`, weight_string(t_user.id), weight_string(t_user.`name`) from t_user",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from t_user_extra_0 where 1 != 1",
                    "Query": "select distinct 1 from t_user_extra where t_user_extra.extra = 'asdf'",
                    "Table": "t_user_extra"
                  }
                ]
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 'b', 'c', weight_string('b'), weight_string('c') from t_user_0 where 1 != 1",
                "Query": "select distinct 'b', 'c', weight_string('b'), weight_string('c') from t_user",
                "Table": "t_user"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "union distinct between a scatter query and a join (other side)",
    "query": "select 'b','c' from t_user union (select t_user.id, t_user.name from t_user join t_user_extra where t_user_extra.extra = 'asdf')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 'b','c' from t_user union (select t_user.id, t_user.name from t_user join t_user_extra where t_user_extra.extra = 'asdf')",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0: utf8mb4_0900_ai_ci",
          "1: utf8mb4_0900_ai_ci"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "Scatter-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 'b', 'c' from t_user_0 where 1 != 1",
                "Query": "select distinct 'b', 'c' from t_user",
                "Table": "t_user"
              },
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1",
                "TableName": "t_user_t_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select t_user_0.id, t_user_0.`name` from t_user_0 where 1 != 1",
                    "Query": "select distinct t_user.id, t_user.`name` from t_user",
                    "Table": "t_user"
                  },
                  {
                    "OperatorType": "TableRoute",
                    "Variant": "Scatter-Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from t_user_extra_0 where 1 != 1",
                    "Query": "select distinct 1 from t_user_extra where t_user_extra.extra = 'asdf'",
                    "Table": "t_user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "union with the same target shard because of vindex",
    "query": "select * from t_authoritative where user_id=1   union select * from t_payment where user_id =1 ",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from t_authoritative where user_id=1   union select * from t_payment where user_id =1 ",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:3)",
          "1: latin1_swedish_ci",
          "(2:4)"
        ],
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_id, col1, col2, weight_string(user_id), weight_string(col2) from (select user_id, col1, col2 from t_authoritative_0 where 1 != 1 union select user_id, col1, col2 from t_payment_0 where 1 != 1) as dt where 1 != 1",
            "Query": "select user_id, col1, col2, weight_string(user_id), weight_string(col2) from (select user_id, col1, col2 from t_authoritative where user_id = 1 union select user_id, col1, col2 from t_payment where user_id = 1) as dt",
            "Table": "t_authoritative, t_payment",
            "Values": [
              "INT64(1)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_authoritative",
        "user.t_payment"
      ]
    }

  },
  {
    "comment": "union with the same target shard  because of vindex with the split table",
    "query": "select * from t_authoritative where user_id = 1 and col1 ='test' union select * from t_payment where user_id = 1 and col1 ='a'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from t_authoritative where user_id = 1 and col1 ='test' union select * from t_payment where user_id = 1 and col1 ='a'",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:3)",
          "1: latin1_swedish_ci",
          "(2:4)"
        ],
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "EqualUnique-EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_id, col1, col2, weight_string(user_id), weight_string(col2) from t_authoritative_0 where 1 != 1",
                "Query": "select distinct user_id, col1, col2, weight_string(user_id), weight_string(col2) from t_authoritative where user_id = 1 and col1 = 'test'",
                "Table": "t_authoritative",
                "TableValues": [
                  "VARCHAR(\"test\")"
                ],
                "Values": [
                  "INT64(1)"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "TableRoute",
                "Variant": "EqualUnique-EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_id, col1, col2, weight_string(user_id), weight_string(col2) from t_payment_0 where 1 != 1",
                "Query": "select distinct user_id, col1, col2, weight_string(user_id), weight_string(col2) from t_payment where user_id = 1 and col1 = 'a'",
                "Table": "t_payment",
                "TableValues": [
                  "VARCHAR(\"a\")"
                ],
                "Values": [
                  "INT64(1)"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_authoritative",
        "user.t_payment"
      ]
    }

  },
  {
    "comment": "UNION ALL with repeating column on the LHS",
    "query": "select foo, foo, foo from t_user union all select bar, baz, toto from t_music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, foo, foo from t_user union all select bar, baz, toto from t_music",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select foo, foo, foo from t_user_0 where 1 != 1 union all select bar, baz, toto from t_music_0 where 1 != 1",
        "Query": "select foo, foo, foo from t_user union all select bar, baz, toto from t_music",
        "Table": "t_music, t_user"
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user"
      ]
    }

  },
  {
    "comment": "union all on scatter and single route",
    "query": "select id from t_user where id = 1 union select id from t_user where id = 1  union all select id from t_user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user where id = 1 union select id from t_user where id = 1  union all select id from t_user",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from t_user_0 where 1 != 1 union select id from t_user_0 where 1 != 1 union all select id from t_user_0 where 1 != 1",
        "Query": "select id from t_user where id = 1 union select id from t_user where id = 1 union all select id from t_user",
        "Table": "t_user"
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }


  },
  {
    "comment": "union operations in derived table, without star expression (FROM)¡",
    "query": "select col1,col2 from (select col1, col2 from t_user union all select col1, col2 from t_user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1,col2 from (select col1, col2 from t_user union all select col1, col2 from t_user_extra) as t",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from (select col1, col2 from t_user_0 where 1 != 1 union all select col1, col2 from t_user_extra_0 where 1 != 1) as t where 1 != 1",
        "Query": "select col1, col2 from (select col1, col2 from t_user union all select col1, col2 from t_user_extra) as t",
        "Table": "t_user, t_user_extra"
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }


  },
  {
    "comment": "multi-shard union",
    "query": "(select id from t_user union select id from t_music) union select 1 from main.dual",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from t_user union select id from t_music) union select 1 from main.dual",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "[COLUMN 0] as id",
                  "WEIGHT_STRING([COLUMN 0]) as weight_string(id)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "SimpleProjection",
                    "Columns": [
                      0
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Distinct",
                        "Collations": [
                          "(0:1)"
                        ],
                        "Inputs": [
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select id, weight_string(id) from (select id from t_user_0 where 1 != 1 union select id from t_music_0 where 1 != 1) as dt where 1 != 1",
                            "Query": "select id, weight_string(id) from (select id from t_user union select id from t_music) as dt",
                            "Table": "t_music, t_user"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1, weight_string(1) from dual where 1 != 1",
                "Query": "select distinct 1, weight_string(1) from dual",
                "Table": "dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.t_music",
        "user.t_user"
      ]
    }



  },
  {
    "comment": "union operations in subqueries (FROM)",
    "query": "select * from (select * from t_user union all select * from t_user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select * from t_user union all select * from t_user_extra) as t",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from (select * from t_user_0 where 1 != 1 union all select * from t_user_extra_0 where 1 != 1) as t where 1 != 1",
        "Query": "select * from (select * from t_user union all select * from t_user_extra) as t",
        "Table": "t_user, t_user_extra"
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
    "comment": "multi-shard union",
    "query": "(select id from t_user union select id from t_music) union select 1 from main.dual",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from t_user union select id from t_music) union select 1 from main.dual",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "[COLUMN 0] as id",
                  "WEIGHT_STRING([COLUMN 0]) as weight_string(id)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "SimpleProjection",
                    "Columns": [
                      0
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Distinct",
                        "Collations": [
                          "(0:1)"
                        ],
                        "Inputs": [
                          {
                            "OperatorType": "TableRoute",
                            "Variant": "Scatter-Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select id, weight_string(id) from (select id from t_user_0 where 1 != 1 union select id from t_music_0 where 1 != 1) as dt where 1 != 1",
                            "Query": "select id, weight_string(id) from (select id from t_user union select id from t_music) as dt",
                            "Table": "t_music, t_user"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1, weight_string(1) from dual where 1 != 1",
                "Query": "select distinct 1, weight_string(1) from dual",
                "Table": "dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.t_music",
        "user.t_user"
      ]
    }


  },
  {
    "comment": "multiple select statement have inner order by with union - TODO (systay) no need to send down ORDER BY if we are going to loose it with UNION DISTINCT",
    "query": "(select id from t_user order by 1 desc) union (select id from t_user order by 1 asc)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from t_user order by 1 desc) union (select id from t_user order by 1 asc)",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "Scatter-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from ((select id from t_user_0 where 1 != 1) union (select id from t_user_0 where 1 != 1)) as dt where 1 != 1",
            "Query": "select id, weight_string(id) from ((select id from t_user order by id desc) union (select id from t_user order by id asc)) as dt",
            "Table": "t_user"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }
  },
  {
    "comment": "pushes predicate on both sides of UNION",
    "query": "select * from (select name, id as foo from t_user union select 'extra', user_id from t_user_extra) X where X.foo = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select name, id as foo from t_user union select 'extra', user_id from t_user_extra) X where X.foo = 3",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0,
          1
        ],
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "0: utf8mb4_0900_ai_ci",
              "(1:2)"
            ],
            "Inputs": [
              {
                "OperatorType": "TableRoute",
                "Variant": "EqualUnique-Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `name`, foo, weight_string(foo) from (select `name`, id as foo from t_user_0 where 1 != 1 union select 'extra', user_id from t_user_extra_0 where 1 != 1) as dt where 1 != 1",
                "Query": "select `name`, foo, weight_string(foo) from (select `name`, id as foo from t_user where id = 3 union select 'extra', user_id from t_user_extra where user_id = 3) as dt",
                "Table": "t_user, t_user_extra",
                "Values": [
                  "INT64(3)"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }
  },
  {
  "comment": "UNION with repeating column on the LHS",
  "query": "select col, col, col from t_user union select col1, col1, col1 from t_authoritative",
  "plan": {
    "QueryType": "SELECT",
    "Original": "select col, col, col from t_user union select col1, col1, col1 from t_authoritative",
    "Instructions": {
      "OperatorType": "Distinct",
      "Collations": [
        "0: latin1_swedish_ci",
        "1: latin1_swedish_ci",
        "2: latin1_swedish_ci"
      ],
      "Inputs": [
        {
          "OperatorType": "Distinct",
          "Collations": [
            "0: latin1_swedish_ci",
            "1: latin1_swedish_ci",
            "2: latin1_swedish_ci"
          ],
          "Inputs": [
            {
              "OperatorType": "TableRoute",
              "Variant": "Scatter-Scatter",
              "Keyspace": {
                "Name": "user",
                "Sharded": true
              },
              "FieldQuery": "select col, col, col from t_user_0 where 1 != 1 union select col1, col1, col1 from t_authoritative_0 where 1 != 1",
              "Query": "select col, col, col from t_user union select col1, col1, col1 from t_authoritative",
              "Table": "t_authoritative, t_user"
            }
          ]
        }
      ]
    },
    "TablesUsed": [
      "user.t_authoritative",
      "user.t_user"
    ]
  }

  },
  {
    "comment": "union all splitTable and not splitTable",
    "query": "select id from t_user where id = 1 union all select col from samecolvin where col = '5'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user where id = 1 union all select col from samecolvin where col = '5'",
      "Instructions": {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 1",
            "Table": "t_user",
            "Values": [
              "INT64(1)"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from samecolvin where 1 != 1",
            "Query": "select col from samecolvin where col = '5'",
            "Table": "samecolvin",
            "Values": [
              "VARCHAR(\"5\")"
            ],
            "Vindex": "vindex1"
          }
        ]
      },
      "TablesUsed": [
        "user.samecolvin",
        "user.t_user"
      ]
    }
  },
  {
    "comment": "union all between three  SelectEqualUnique",
    "query": "select id from t_user where id = 1 and col = '1' union all select id from t_user where id = 5 and col = '5' union all select id from t_user where id = 7 and col = '4'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user where id = 1 and col = '1' union all select id from t_user where id = 5 and col = '5' union all select id from t_user where id = 7 and col = '4'",
      "Instructions": {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 1 and col = '1'",
            "Table": "t_user",
            "TableValues": [
              "VARCHAR(\"1\")"
            ],
            "Values": [
              "INT64(1)"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 5 and col = '5'",
            "Table": "t_user",
            "TableValues": [
              "VARCHAR(\"5\")"
            ],
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "TableRoute",
            "Variant": "EqualUnique-EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from t_user_0 where 1 != 1",
            "Query": "select id from t_user where id = 7 and col = '4'",
            "Table": "t_user",
            "TableValues": [
              "VARCHAR(\"4\")"
            ],
            "Values": [
              "INT64(7)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.t_user"
      ]
    }

  },
  {
    "comment": "union all ",
    "query": "select id from t_user  union all select id from t_music  union all select id from t_user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from t_user  union all select id from t_music  union all select id from t_user_extra",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from t_user_0 where 1 != 1 union all select id from t_music_0 where 1 != 1 union all select id from t_user_extra_0 where 1 != 1",
        "Query": "select id from t_user union all select id from t_music union all select id from t_user_extra",
        "Table": "t_music, t_user, t_user_extra"
      },
      "TablesUsed": [
        "user.t_music",
        "user.t_user",
        "user.t_user_extra"
      ]
    }

  },
  {
    "comment": "multi-shard union",
    "query": "select col1, col2 from t_user union all select col1, foo from t_user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, col2 from t_user union all select col1, foo from t_user_extra",
      "Instructions": {
        "OperatorType": "TableRoute",
        "Variant": "Scatter-Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from t_user_0 where 1 != 1 union all select col1, foo from t_user_extra_0 where 1 != 1",
        "Query": "select col1, col2 from t_user union all select col1, foo from t_user_extra",
        "Table": "t_user, t_user_extra"
      },
      "TablesUsed": [
        "user.t_user",
        "user.t_user_extra"
      ]
    }

  }


]
