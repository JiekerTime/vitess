[
  {
    "comment": "Join on weird columns.",
    "query": "select `weird``name`.a, unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select `weird``name`.a, unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0,L:0",
        "JoinVars": {
          "unsharded_id": 1
        },
        "TableName": "unsharded_`weird``name`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.b, unsharded.id from unsharded where 1 != 1",
            "Query": "select unsharded.b, unsharded.id from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `weird``name`.a from `weird``name` where 1 != 1",
            "Query": "select `weird``name`.a from `weird``name` where `weird``name`.`a``b*c` = :unsharded_id",
            "Table": "`weird``name`",
            "Values": [
              ":unsharded_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.weird`name"
      ]
    }
  },
  {
    "comment": "Join on weird column (col is not in select)",
    "query": "select unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "unsharded_id": 1
        },
        "TableName": "unsharded_`weird``name`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.b, unsharded.id from unsharded where 1 != 1",
            "Query": "select unsharded.b, unsharded.id from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `weird``name` where 1 != 1",
            "Query": "select 1 from `weird``name` where `weird``name`.`a``b*c` = :unsharded_id",
            "Table": "`weird``name`",
            "Values": [
              ":unsharded_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.weird`name"
      ]
    }
  },
  {
    "comment": "derived table with column aliases not supported by v3, but planner is overridden with hint",
    "query": "select /*vt+ PLANNER=gen4 */ u.a from (select id as b, name from user) u(a, n) where u.n = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select /*vt+ PLANNER=gen4 */ u.a from (select id as b, name from user) u(a, n) where u.n = 1",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a from (select id as b, `name` from `user` where 1 != 1) as u(a, n) where 1 != 1",
            "Query": "select /*vt+ PLANNER=gen4 */ u.a from (select id as b, `name` from `user` where `name` = 1) as u(a, n)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "derived table with column aliases not supported by v3, but planner is overridden with hint",
    "query": "select /*vt+ PLANNER=v3 */ u.a from (select id as b, name from user) u(a, n) where u.n = 1",
    "plan": "VT12001: unsupported: column aliases in derived table"
  },
  {
    "comment": "Three-way join using the left2right. The normal gen4 planner would merge m1 and m2 first, but the left to right doesnt",
    "query": "select /*vt+ PLANNER=left2right */ user.col from user join unsharded as m1 join unsharded as m2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select /*vt+ PLANNER=left2right */ user.col from user join unsharded as m1 join unsharded as m2",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_unsharded_unsharded",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col from `user` where 1 != 1",
                "Query": "select /*vt+ PLANNER=left2right */ `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1 from unsharded as m1 where 1 != 1",
                "Query": "select /*vt+ PLANNER=left2right */ 1 from unsharded as m1",
                "Table": "unsharded"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m2 where 1 != 1",
            "Query": "select /*vt+ PLANNER=left2right */ 1 from unsharded as m2",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Wire-up in subquery",
    "query": "select 1 from user where id in (select u.id+e.id from user u join user_extra e where e.id = u.col limit 10)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user where id in (select u.id+e.id from user u join user_extra e where e.id = u.col limit 10)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Limit",
            "Count": "INT64(10)",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0",
                "JoinVars": {
                  "u_col": 1,
                  "u_id": 0
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.id, u.col from `user` as u where 1 != 1",
                    "Query": "select u.id, u.col from `user` as u",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select :u_id + e.id as `u.id + e.id` from user_extra as e where 1 != 1",
                    "Query": "select :u_id + e.id as `u.id + e.id` from user_extra as e where e.id = :u_col",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user` where :__sq_has_values and id in ::__vals",
            "Table": "`user`",
            "Values": [
              "::__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  }
]
