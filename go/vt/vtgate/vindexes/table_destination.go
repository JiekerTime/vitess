/*
Copyright 2019 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vindexes

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"math/rand"
	"strconv"
	"vitess.io/vitess/go/vt/key"
	vtrpcpb "vitess.io/vitess/go/vt/proto/vtrpc"
	"vitess.io/vitess/go/vt/vterrors"
)

// TableDestination is an interface definition for a query destination,
// within a given logic table . It is meant to be an internal
// data structure, with multiple possible implementations.
type TableDestination interface {
	// Resolve calls the callback for every table Destination
	// resolves into, given the tables list.
	// The returned error must be generated by vterrors.
	Resolve(*LogicTableConfig, func(actualTableIndex int) error) error

	// String returns a printable version of the Destination.
	String() string
}

// TableDestinationsString returns a printed version of the destination array.
func TableDestinationsString(destinations []key.Destination) string {
	var buffer bytes.Buffer
	buffer.WriteString("Destinations:")
	for i, d := range destinations {
		if i > 0 {
			buffer.WriteByte(',')
		}
		buffer.WriteString(d.String())
	}
	return buffer.String()
}

// DestinationTable is the destination for a single Shard.
// It implements the Destination interface.
type DestinationTable int

// Resolve is part of the Destination interface.
func (d DestinationTable) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	return addTable(int(d))
}

// String is part of the Destination interface.
func (d DestinationTable) String() string {
	return "DestinationTable(" + strconv.FormatUint(uint64(d), 10) + ")"
}

type DestinationAllTables struct{}

// Resolve is part of the Destination interface.
func (d DestinationAllTables) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	for _, table := range tables.ActualTableList {
		if err := addTable(table.Index); err != nil {
			return err
		}
	}
	return nil
}

// String is part of the Destination interface.
func (d DestinationAllTables) String() string {
	return "DestinationAllTables()"
}

type DestinationAnyTable struct{}

// Resolve is part of the Destination interface.
func (d DestinationAnyTable) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	if len(tables.ActualTableList) == 0 {
		return vterrors.Errorf(vtrpcpb.Code_UNAVAILABLE, "no table in keyspace")
	}

	return addTable(rand.Intn(len(tables.ActualTableList)))
}

// String is part of the Destination interface.
func (d DestinationAnyTable) String() string {
	return "DestinationAnyTable()"
}

// DestinationTables is the destination for multiple tables.
// It implements the Destination interface.
type DestinationTables []int

// Resolve is part of the Destination interface.
func (d DestinationTables) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	for _, table := range d {
		if err := addTable(table); err != nil {
			return err
		}
	}
	return nil
}

// String is part of the Destination interface.
func (d DestinationTables) String() string {
	return "DestinationTables"
}

// TableDestinationKeyspaceID is the destination for a single KeyspaceID.
// It implements the Destination interface.
type TableDestinationKeyspaceID []byte

// Resolve is part of the Destination interface.
func (d TableDestinationKeyspaceID) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	table, err := GetTableIndexForKeyspaceID(tables, d)
	if err != nil {
		return err
	}
	return addTable(table)
}

// String is part of the Destination interface.
func (d TableDestinationKeyspaceID) String() string {
	return "DestinationKeyspaceID(" + hex.EncodeToString(d) + ")"
}

// GetTableIndexForKeyspaceID finds the right shard for a keyspace id.
func GetTableIndexForKeyspaceID(tables *LogicTableConfig, keyspaceID []byte) (int, error) {
	return int(binary.BigEndian.Uint64(keyspaceID) % uint64(tables.TableCount)), nil
}

//
// TableDestinationUint64KeyspaceID
//

// TableDestinationUint64KeyspaceID is the destination for a single KeyspaceID.
// It implements the Destination interface.
type TableDestinationUint64KeyspaceID uint64

// Resolve is part of the Destination interface.
func (d TableDestinationUint64KeyspaceID) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	table, err := GetTableIndexForUint64KeyspaceID(tables, uint64(d))
	if err != nil {
		return err
	}
	return addTable(table)
}

// String is part of the Destination interface.
func (d TableDestinationUint64KeyspaceID) String() string {
	return "DestinationKeyspaceID(" + strconv.Itoa(int(d)) + ")"
}

// GetTableIndexForUint64KeyspaceID finds the right shard for a keyspace id.
func GetTableIndexForUint64KeyspaceID(tables *LogicTableConfig, keyspaceID uint64) (int, error) {
	return int(keyspaceID % uint64(tables.TableCount)), nil
}

// TableDestinationList is the destination for a single split table.
// It implements the Destination interface.
type TableDestinationList string

// Resolve is part of the Destination interface.
func (d TableDestinationList) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	if value, ok := tables.Params[string(d)]; ok {
		return addTable(value.Index)
	} else {
		return vterrors.Errorf(vtrpcpb.Code_OUT_OF_RANGE, "column data %s out of range", d.String())
	}
}

// String is part of the Destination interface.
func (d TableDestinationList) String() string {
	return "TableDestinationList(" + string(d) + ")"
}

// TableDestinationRangeMMDD is the destination for a single split table.
// It implements the Destination interface.
type TableDestinationRangeMMDD int

// Resolve is part of the Destination interface.
func (d TableDestinationRangeMMDD) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	return addTable(int(d) - 1)
}

// String is part of the Destination interface.
func (d TableDestinationRangeMMDD) String() string {
	return "TableDestinationRangeMMDD(" + strconv.Itoa(int(d)) + ")"
}

// TableDestinationRangeMM is the destination for a single split table.
// It implements the Destination interface.
type TableDestinationRangeMM int

// Resolve is part of the Destination interface.
func (d TableDestinationRangeMM) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex int) error) error {
	return addTable(int(d) - 1)
}

// String is part of the Destination interface.
func (d TableDestinationRangeMM) String() string {
	return "TableDestinationRangeMM(" + strconv.Itoa(int(d)) + ")"
}

// TableDestinationModKeyspaceID is the destination for a single KeyspaceID.
// It implements the Destination interface.
type TableDestinationModKeyspaceID []byte

// Resolve is part of the Destination interface.
func (d TableDestinationModKeyspaceID) Resolve(tables *LogicTableConfig, addTable func(actualTableIndex string) error) error {
	table, err := GetTableForModKeyspaceID(tables, d)
	if err != nil {
		return err
	}
	return addTable(table)
}

// String is part of the Destination interface.
func (d TableDestinationModKeyspaceID) String() string {
	return "DestinationKeyspaceID(" + hex.EncodeToString(d) + ")"
}

// GetTableForModKeyspaceID finds the right shard for a keyspace id.
func GetTableForModKeyspaceID(allShards *LogicTableConfig, modKeyspaceID []byte) (string, error) {

	return "", vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "KeyspaceId %v didn't match any shards %+v", hex.EncodeToString(modKeyspaceID), allShards)
}

//
// DestinationNone
//

// TableDestinationNone is a destination that doesn't resolve to any shard.
// It implements the Destination interface.
type TableDestinationNone struct{}

// Resolve is part of the Destination interface.
func (d TableDestinationNone) Resolve(allShards *LogicTableConfig, addTable func(table int) error) error {
	return nil
}

// String is part of the TableDestination interface.
func (d TableDestinationNone) String() string {
	return "TableDestinationNone()"
}
